/* The following code was generated by JFlex 1.4.3 on 12/05/16 3:29 */

package anubis.parser;
import java.io.*;
import anubis.except.*;
import anubis.ast.Position;

@SuppressWarnings("unused")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/05/16 3:29 from the specification file
 * <tt>anubis.jflex</tt>
 */
class Scanner implements Parser.yyInput {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINE_SYMBOL = 12;
  public static final int LINE_COMMENT = 4;
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_STRING = 8;
  public static final int SIMPLE_STRING = 10;
  public static final int LINE_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\16\2\0\1\15\22\0\1\17\1\57\1\75\1\74"+
    "\1\46\1\55\1\0\1\77\1\64\1\65\1\52\1\51\1\72\1\12"+
    "\1\13\1\53\1\3\1\11\10\1\1\47\1\73\1\60\1\50\1\61"+
    "\1\56\1\45\1\6\1\10\2\6\1\14\1\6\7\2\1\101\1\2"+
    "\1\105\1\2\1\102\1\104\3\2\1\103\1\5\2\2\1\70\1\54"+
    "\1\71\1\63\1\2\1\100\1\40\1\7\1\23\1\26\1\22\1\27"+
    "\1\41\1\33\1\32\1\21\1\42\1\34\1\2\1\31\1\20\1\43"+
    "\1\2\1\25\1\35\1\24\1\30\1\44\1\36\1\4\1\37\1\2"+
    "\1\66\1\76\1\67\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\1\3\1\4\1\3\2\4"+
    "\1\5\1\6\2\1\17\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\2\1\21"+
    "\1\22\2\2\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\3\1\2\37"+
    "\1\40\1\0\1\41\2\42\2\2\1\40\1\41\3\0"+
    "\2\4\1\43\1\44\1\45\1\4\1\46\10\4\1\47"+
    "\7\4\1\50\10\4\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\0\1\71\1\72\2\1\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\2\0\1\106\1\107\2\3\1\110\3\4"+
    "\1\111\5\4\1\112\5\4\1\113\4\4\1\114\10\4"+
    "\1\115\2\4\1\116\1\0\3\4\1\117\2\4\1\120"+
    "\1\121\1\122\1\4\1\123\6\4\1\124\4\4\1\125"+
    "\4\4\1\126\1\0\1\127\1\4\1\130\1\4\1\131"+
    "\1\132\4\4\1\133\1\134\3\4\1\135\1\136\1\4"+
    "\1\137\1\4\1\0\1\140\1\4\1\141\1\142\2\4"+
    "\1\143\1\4\1\144\1\145\1\146\1\0\2\4\1\147"+
    "\1\150\1\0\1\151\1\152\1\0\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u01ea\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u01ea\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u01ea"+
    "\0\u0d66\0\u0dac\0\u01ea\0\u0df2\0\u01ea\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u10ae\0\u0276\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u0276\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u0276\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u173e\0\u01ea\0\u01ea\0\u1784"+
    "\0\u17ca\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u1810\0\u1856\0\u01ea\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u0276\0\u189c\0\u18e2\0\u1928\0\u0276\0\u196e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u0276\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u1b9e\0\u1be4\0\u0276\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u0276"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u0276\0\u1f72\0\u1fb8\0\u01ea\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u0276\0\u2116\0\u215c\0\u0276\0\u0276\0\u0276\0\u21a2\0\u0276"+
    "\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u0276\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u0276\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u0276\0\u25bc\0\u0276\0\u2602\0\u0276\0\u2648\0\u0276\0\u0276"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u0276\0\u0276\0\u27a6\0\u27ec"+
    "\0\u2832\0\u0276\0\u0276\0\u2878\0\u0276\0\u28be\0\u2904\0\u0276"+
    "\0\u294a\0\u0276\0\u0276\0\u2990\0\u29d6\0\u0276\0\u2a1c\0\u0276"+
    "\0\u0276\0\u0276\0\u2a62\0\u2aa8\0\u2aee\0\u0276\0\u0276\0\u2b34"+
    "\0\u0276\0\u0276\0\u2b7a\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\2\12\1\15\1\12"+
    "\1\11\1\16\1\17\1\12\1\20\2\21\1\22\1\12"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\12\1\34\1\35\1\36\1\12\1\37\3\12"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\10\1\72\1\73\5\12\15\74\2\21"+
    "\33\74\1\75\33\74\15\76\1\77\1\100\67\76\15\101"+
    "\2\0\35\101\1\102\20\101\1\103\1\101\2\0\5\101"+
    "\15\10\1\104\1\105\44\10\1\106\12\10\1\107\7\10"+
    "\15\110\1\104\1\105\60\110\1\111\6\110\15\101\2\0"+
    "\35\101\1\102\20\101\1\0\1\101\1\0\1\103\5\101"+
    "\107\0\1\11\1\0\1\11\5\0\1\11\1\0\2\112"+
    "\5\0\1\112\64\0\11\12\2\0\1\12\3\0\25\12"+
    "\1\0\1\12\32\0\5\12\1\0\1\11\1\0\1\11"+
    "\2\113\1\0\2\114\1\11\1\0\2\112\5\0\1\112"+
    "\64\0\11\12\2\0\1\12\3\0\1\115\24\12\1\0"+
    "\1\12\32\0\5\12\1\0\11\12\2\0\1\12\3\0"+
    "\5\12\1\116\17\12\1\0\1\12\32\0\5\12\1\0"+
    "\1\11\1\0\1\13\5\0\1\11\36\0\1\117\10\0"+
    "\1\120\37\0\1\121\110\0\1\21\70\0\6\12\1\122"+
    "\2\12\2\0\1\12\3\0\5\12\1\123\2\12\1\124"+
    "\14\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\11\12\1\125\2\12\1\126\10\12\1\0"+
    "\1\12\32\0\5\12\1\0\11\12\2\0\1\12\3\0"+
    "\1\127\17\12\1\130\4\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\5\12\1\131\5\12"+
    "\1\132\11\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\2\12\1\133\22\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\1\134"+
    "\24\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\1\135\7\12\1\136\1\12\1\137\5\12"+
    "\1\140\4\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\15\12\1\141\7\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\1\142"+
    "\7\12\1\143\14\12\1\0\1\12\32\0\5\12\1\0"+
    "\11\12\2\0\1\12\3\0\7\12\1\144\5\12\1\145"+
    "\7\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\1\146\24\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\10\12\1\147\5\12"+
    "\1\150\6\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\13\12\1\151\11\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\11\12"+
    "\1\152\3\12\1\153\7\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\1\154\24\12\1\0"+
    "\1\12\32\0\5\12\1\0\11\12\2\0\1\12\3\0"+
    "\25\12\1\0\1\12\21\0\1\155\10\0\5\12\47\0"+
    "\1\156\1\157\105\0\1\160\10\0\1\161\25\0\1\11"+
    "\1\0\1\13\5\0\1\11\36\0\1\162\105\0\1\163"+
    "\105\0\1\164\1\0\1\165\1\70\102\0\1\166\105\0"+
    "\1\167\17\0\1\170\73\0\1\171\77\0\1\172\105\0"+
    "\1\173\10\0\1\172\74\0\1\174\25\0\1\175\57\0"+
    "\1\176\105\0\1\177\35\0\15\74\1\0\1\21\33\74"+
    "\1\0\33\74\15\200\1\0\1\21\33\200\1\201\1\100"+
    "\32\200\15\76\2\0\67\76\16\0\1\100\67\0\15\101"+
    "\2\0\35\101\1\0\20\101\1\0\1\101\2\0\5\101"+
    "\7\0\1\202\14\0\1\203\1\204\1\0\1\205\1\0"+
    "\1\206\22\0\1\207\20\0\1\210\1\0\1\211\1\212"+
    "\1\213\1\214\21\0\1\105\155\0\1\215\115\0\1\216"+
    "\7\0\15\110\2\0\60\110\1\0\6\110\77\0\1\217"+
    "\7\0\1\220\1\0\1\220\5\0\1\220\75\0\1\221"+
    "\1\0\1\221\2\0\4\221\2\0\1\221\5\0\2\221"+
    "\2\0\2\221\10\0\1\221\50\0\1\222\5\0\1\222"+
    "\75\0\11\12\2\0\1\12\3\0\5\12\1\223\17\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\224\22\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\1\12\1\225\23\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\4\12\1\226\20\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\6\12\1\227\16\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\15\12\1\230\7\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\11\12\1\231\13\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\4\12\1\232\10\12\1\233\7\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\10\12"+
    "\1\234\6\12\1\235\5\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\236\2\12"+
    "\1\237\4\12\1\240\12\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\3\12\1\241\1\242"+
    "\20\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\5\12\1\243\17\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\11\12\1\244"+
    "\13\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\11\12\1\245\13\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\14\12\1\246"+
    "\10\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\12\12\1\247\12\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\4\12\1\250"+
    "\20\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\14\12\1\251\10\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\4\12\1\252"+
    "\2\12\1\253\1\12\1\254\13\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\3\12\1\255"+
    "\21\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\23\12\1\256\1\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\12\12\1\257"+
    "\12\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\12\12\1\260\12\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\6\12\1\261"+
    "\16\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\15\12\1\262\7\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\12\12\1\263"+
    "\12\12\1\0\1\12\32\0\5\12\76\0\1\264\7\0"+
    "\15\200\1\0\1\21\33\200\2\0\47\200\1\0\1\21"+
    "\33\200\1\201\1\0\32\200\103\0\1\265\62\0\1\103"+
    "\26\0\11\12\2\0\1\12\3\0\20\12\1\266\4\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\267\22\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\270\22\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\271\22\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\4\12\1\272\20\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\3\12\1\273\21\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\274\22\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\275\22\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\11\12\1\276\13\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\1\277\24\12\1\0\1\12\32\0\5\12\1\0"+
    "\11\12\2\0\1\12\3\0\15\12\1\300\7\12\1\0"+
    "\1\12\32\0\5\12\1\0\11\12\2\0\1\12\3\0"+
    "\1\301\24\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\10\12\1\302\14\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\3\12"+
    "\1\303\21\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\20\12\1\304\4\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\15\12"+
    "\1\305\7\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\11\12\1\306\13\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\14\12"+
    "\1\307\10\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\5\12\1\310\17\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\20\12"+
    "\1\311\4\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\10\12\1\312\14\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\20\12"+
    "\1\313\1\12\1\314\2\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\315\22\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\4\12\1\316\20\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\14\12\1\317\10\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\320\22\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\6\12\1\321\16\12"+
    "\1\0\1\12\32\0\5\12\104\0\1\322\2\0\11\12"+
    "\2\0\1\12\3\0\22\12\1\323\2\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\3\12"+
    "\1\324\21\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\5\12\1\325\17\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\12\12"+
    "\1\326\12\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\13\12\1\327\11\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\16\12"+
    "\1\330\6\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\5\12\1\331\17\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\5\12"+
    "\1\332\17\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\4\12\1\333\20\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\14\12"+
    "\1\334\10\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\2\12\1\335\22\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\21\12"+
    "\1\336\3\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\10\12\1\337\14\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\14\12"+
    "\1\340\10\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\14\12\1\341\10\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\14\12"+
    "\1\342\10\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\5\12\1\343\17\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\3\12"+
    "\1\344\21\12\1\0\1\12\32\0\5\12\1\0\11\12"+
    "\2\0\1\12\3\0\2\12\1\345\22\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\5\12"+
    "\1\346\17\12\1\0\1\12\32\0\5\12\105\0\1\347"+
    "\1\0\11\12\2\0\1\12\3\0\4\12\1\350\20\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\11\12\1\351\13\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\6\12\1\352\16\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\11\12\1\353\13\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\12\12\1\354\12\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\14\12\1\355\10\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\356\22\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\15\12\1\357\7\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\14\12\1\360\10\12"+
    "\1\0\1\12\32\0\5\12\1\0\11\12\2\0\1\12"+
    "\3\0\13\12\1\361\11\12\1\0\1\12\32\0\5\12"+
    "\1\0\11\12\2\0\1\12\3\0\4\12\1\362\20\12"+
    "\1\0\1\12\32\0\5\12\67\0\1\363\17\0\11\12"+
    "\2\0\1\12\3\0\10\12\1\364\14\12\1\0\1\12"+
    "\32\0\5\12\1\0\11\12\2\0\1\12\3\0\1\365"+
    "\24\12\1\0\1\12\32\0\5\12\1\0\11\12\2\0"+
    "\1\12\3\0\17\12\1\366\5\12\1\0\1\12\32\0"+
    "\5\12\1\0\11\12\2\0\1\12\3\0\2\12\1\367"+
    "\22\12\1\0\1\12\32\0\5\12\13\0\1\370\73\0"+
    "\11\12\2\0\1\12\3\0\2\12\1\371\22\12\1\0"+
    "\1\12\32\0\5\12\1\0\11\12\2\0\1\12\3\0"+
    "\11\12\1\372\13\12\1\0\1\12\32\0\5\12\52\0"+
    "\1\373\101\0\1\374\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\11\10\1\1\11\17\1\1\11"+
    "\16\1\14\11\4\1\1\11\1\1\1\0\1\11\1\1"+
    "\1\11\4\1\3\0\2\1\3\11\33\1\20\11\1\0"+
    "\2\11\2\1\13\11\2\0\1\11\44\1\1\11\1\0"+
    "\34\1\1\0\24\1\1\0\13\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private static final String lineSeparator = "\n";
	private int token;
	private Token value = null;
	private String filename = null;
	
	public boolean advance() throws java.io.IOException {
		token = yylex();
		if (token == YYEOF) {
			tk(token, "end-of-file");
		}
		return token != YYEOF;
	}
	
	public int token() {
		return token;
	}
	
	public Token value() {
		return value;
	}
	
	public void setSourceFileName(String filename) {
		this.filename = filename;
	}
	
	public String getSourceFileName() {
		return filename;
	}
	
	public int getLine() {
		return yyline + 1;
	}
	
	public int getColumn() {
		return yycolumn + 1;
	}
	
	private void errorInvalidChars(String text) {
		throw ExceptionProvider.newParseExceptionByInvalidChars(text, ParserHelper.getHexCode(text), getLine(), getColumn());
	}
	
	private void errorStringNotTerminated(String name) {
		throw ExceptionProvider.newParseExceptionByStringNotTerminated(name, getLine(), getColumn());
	}
	
	private int tk(int token) {
		return tk(token, yytext());
	}
	
	private int tk(int token, String text) {
		value = new Token(token, text, new Position(getSourceFileName(), getLine(), getColumn()));
		return token;
	}
	
	private void btk(int token) {
		value = new Token(token, new Position(getSourceFileName(), getLine(), getColumn()));
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 103: 
          { return tk(Parser.FINALLY);
          }
        case 108: break;
        case 10: 
          { return tk(Parser.ASSIGN);
          }
        case 109: break;
        case 92: 
          { return tk(Parser.USING);
          }
        case 110: break;
        case 58: 
          { return tk(Parser.RREPL);
          }
        case 111: break;
        case 64: 
          { value.append('\\');
          }
        case 112: break;
        case 95: 
          { return tk(Parser.WHILE);
          }
        case 113: break;
        case 70: 
          { value.append( "\'" );
          }
        case 114: break;
        case 89: 
          { return tk(Parser.CATCH);
          }
        case 115: break;
        case 73: 
          { return tk(Parser.END);
          }
        case 116: break;
        case 25: 
          { return tk(Parser.COMMA);
          }
        case 117: break;
        case 72: 
          { return tk(Parser.XOR);
          }
        case 118: break;
        case 80: 
          { return tk(Parser.CASE);
          }
        case 119: break;
        case 49: 
          { yybegin(BLOCK_COMMENT);
          }
        case 120: break;
        case 22: 
          { return tk(Parser.RB);
          }
        case 121: break;
        case 8: 
          { return tk(Parser.DOLLAR);
          }
        case 122: break;
        case 50: 
          { return tk(Parser.ASSIGN_TRUEDIV);
          }
        case 123: break;
        case 101: 
          { return tk(Parser.SWITCH);
          }
        case 124: break;
        case 59: 
          { value.append('\b');
          }
        case 125: break;
        case 68: 
          { value.append(System.getProperty("line.separator", "\n"));
          }
        case 126: break;
        case 55: 
          { return tk(Parser.LTEQ);
          }
        case 127: break;
        case 86: 
          { return tk(Parser.VOID);
          }
        case 128: break;
        case 53: 
          { return tk(Parser.IFNULL);
          }
        case 129: break;
        case 37: 
          { return tk(Parser.DOT2);
          }
        case 130: break;
        case 26: 
          { return tk(Parser.SEMICOLON);
          }
        case 131: break;
        case 85: 
          { return tk(Parser.LOCK);
          }
        case 132: break;
        case 30: 
          { btk(Parser.IDENTIFIER); yybegin(LINE_SYMBOL);
          }
        case 133: break;
        case 62: 
          { value.append('\f');
          }
        case 134: break;
        case 3: 
          { return tk(Parser.INTEGER);
          }
        case 135: break;
        case 18: 
          { return tk(Parser.GT);
          }
        case 136: break;
        case 106: 
          { return tk(Parser.FUNCTION);
          }
        case 137: break;
        case 43: 
          { return tk(Parser.NEWSLOT);
          }
        case 138: break;
        case 44: 
          { return tk(Parser.EQ);
          }
        case 139: break;
        case 71: 
          { return tk(Parser.DECIMAL);
          }
        case 140: break;
        case 79: 
          { return tk(Parser.ELSE);
          }
        case 141: break;
        case 104: 
          { return tk(Parser.ISFALSE);
          }
        case 142: break;
        case 90: 
          { return tk(Parser.THROW);
          }
        case 143: break;
        case 39: 
          { return tk(Parser.DO);
          }
        case 144: break;
        case 45: 
          { return tk(Parser.RIGHT_DARROW);
          }
        case 145: break;
        case 97: 
          { return tk(Parser.RECORD);
          }
        case 146: break;
        case 2: 
          { errorInvalidChars(yytext());
          }
        case 147: break;
        case 56: 
          { return tk(Parser.GTEQ);
          }
        case 148: break;
        case 17: 
          { return tk(Parser.LT);
          }
        case 149: break;
        case 69: 
          { value.append(System.getProperty("line.separator", "\r"));
          }
        case 150: break;
        case 75: 
          { return tk(Parser.FOR);
          }
        case 151: break;
        case 28: 
          { btk(Parser.STRING); yybegin(LINE_STRING);
          }
        case 152: break;
        case 42: 
          { return tk(Parser.COLON2);
          }
        case 153: break;
        case 12: 
          { return tk(Parser.MUL);
          }
        case 154: break;
        case 63: 
          { value.append('\n');
          }
        case 155: break;
        case 65: 
          { value.append('\"');
          }
        case 156: break;
        case 19: 
          { return tk(Parser.LP);
          }
        case 157: break;
        case 87: 
          { return tk(Parser.BREAK);
          }
        case 158: break;
        case 105: 
          { return tk(Parser.CONTINUE);
          }
        case 159: break;
        case 13: 
          { return tk(Parser.DIV);
          }
        case 160: break;
        case 38: 
          { return tk(Parser.OR);
          }
        case 161: break;
        case 67: 
          { value.append('`');
          }
        case 162: break;
        case 91: 
          { return tk(Parser.FALSE);
          }
        case 163: break;
        case 15: 
          { return tk(Parser.MOD);
          }
        case 164: break;
        case 61: 
          { value.append('\r');
          }
        case 165: break;
        case 98: 
          { return tk(Parser.RETURN);
          }
        case 166: break;
        case 81: 
          { return tk(Parser.TRUE);
          }
        case 167: break;
        case 66: 
          { value.append('\'');
          }
        case 168: break;
        case 36: 
          { return tk(Parser.RIGHT_ARROW);
          }
        case 169: break;
        case 60: 
          { value.append('\t');
          }
        case 170: break;
        case 93: 
          { return tk(Parser.LOCAL);
          }
        case 171: break;
        case 96: 
          { return tk(Parser.OBJECT);
          }
        case 172: break;
        case 84: 
          { return tk(Parser.NULL);
          }
        case 173: break;
        case 47: 
          { return tk(Parser.ASSIGN_MUL);
          }
        case 174: break;
        case 74: 
          { return tk(Parser.TRY);
          }
        case 175: break;
        case 11: 
          { return tk(Parser.PLUS);
          }
        case 176: break;
        case 57: 
          { return tk(Parser.RFIND);
          }
        case 177: break;
        case 29: 
          { btk(Parser.STRING); yybegin(SIMPLE_STRING);
          }
        case 178: break;
        case 20: 
          { return tk(Parser.RP);
          }
        case 179: break;
        case 7: 
          { return tk(Parser.ATMARK);
          }
        case 180: break;
        case 31: 
          { yybegin(YYINITIAL);
          }
        case 181: break;
        case 32: 
          { value.append( yytext() );
          }
        case 182: break;
        case 14: 
          { return tk(Parser.TRUEDIV);
          }
        case 183: break;
        case 54: 
          { return tk(Parser.NEQ);
          }
        case 184: break;
        case 48: 
          { return tk(Parser.ASSIGN_DIV);
          }
        case 185: break;
        case 46: 
          { return tk(Parser.ASSIGN_ADD);
          }
        case 186: break;
        case 83: 
          { return tk(Parser.THIS);
          }
        case 187: break;
        case 51: 
          { return tk(Parser.ASSIGN_MOD);
          }
        case 188: break;
        case 27: 
          { yybegin(LINE_COMMENT);
          }
        case 189: break;
        case 6: 
          { return tk(Parser.DOT);
          }
        case 190: break;
        case 40: 
          { return tk(Parser.IF);
          }
        case 191: break;
        case 99: 
          { return tk(Parser.ISTRUE);
          }
        case 192: break;
        case 94: 
          { return tk(Parser.SUPER);
          }
        case 193: break;
        case 88: 
          { return tk(Parser.OUTER);
          }
        case 194: break;
        case 24: 
          { return tk(Parser.RBT);
          }
        case 195: break;
        case 41: 
          { return tk(Parser.SET_LBT);
          }
        case 196: break;
        case 82: 
          { return tk(Parser.THEN);
          }
        case 197: break;
        case 5: 
          { return tk(Parser.MINUS);
          }
        case 198: break;
        case 77: 
          { return tk(Parser.AND);
          }
        case 199: break;
        case 100: 
          { return tk(Parser.ISNULL);
          }
        case 200: break;
        case 52: 
          { return tk(Parser.MAP_LBT);
          }
        case 201: break;
        case 4: 
          { return tk(Parser.IDENTIFIER);
          }
        case 202: break;
        case 102: 
          { return tk(Parser.ASSERT);
          }
        case 203: break;
        case 35: 
          { return tk(Parser.ASSIGN_SUB);
          }
        case 204: break;
        case 78: 
          { btk(Parser.STRING); yybegin(BLOCK_STRING);
          }
        case 205: break;
        case 76: 
          { return tk(Parser.NOT);
          }
        case 206: break;
        case 9: 
          { return tk(Parser.COLON);
          }
        case 207: break;
        case 33: 
          { yybegin(YYINITIAL); return value.getToken();
          }
        case 208: break;
        case 34: 
          { value.append( lineSeparator );
          }
        case 209: break;
        case 23: 
          { return tk(Parser.LBT);
          }
        case 210: break;
        case 16: 
          { return tk(Parser.QUESTION);
          }
        case 211: break;
        case 21: 
          { return tk(Parser.LB);
          }
        case 212: break;
        case 107: 
          { value.append(1 <= yytext().length() ? yytext().substring(1) : yytext());
          }
        case 213: break;
        case 1: 
          { 
          }
        case 214: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case LINE_SYMBOL: {
              errorStringNotTerminated("symbol");
            }
            case 253: break;
            case BLOCK_COMMENT: {
              errorStringNotTerminated("comment");
            }
            case 254: break;
            case BLOCK_STRING: {
              errorStringNotTerminated("string");
            }
            case 255: break;
            case SIMPLE_STRING: {
              errorStringNotTerminated("string");
            }
            case 256: break;
            case LINE_STRING: {
              errorStringNotTerminated("string");
            }
            case 257: break;
            default:
              { 	return YYEOF;
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
