/* The following code was generated by JFlex 1.4.3 on 12/04/10 11:38 */

package anubis.parser;
import java.io.*;
import anubis.except.*;

@SuppressWarnings("unused")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/04/10 11:38 from the specification file
 * <tt>anubis.jflex</tt>
 */
class Scanner implements Parser.yyInput {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINE_SYMBOL = 12;
  public static final int LINE_COMMENT = 4;
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_STRING = 8;
  public static final int SIMPLE_STRING = 10;
  public static final int LINE_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\16\2\0\1\15\22\0\1\17\1\53\1\74\1\73"+
    "\1\66\1\51\1\0\1\75\1\60\1\61\1\46\1\45\1\67\1\12"+
    "\1\13\1\47\1\3\1\11\10\1\1\43\1\70\1\54\1\44\1\55"+
    "\1\52\1\42\1\6\1\10\2\6\1\14\1\6\11\2\1\101\2\2"+
    "\1\100\3\2\1\77\1\5\2\2\1\64\1\50\1\65\1\57\1\2"+
    "\1\76\1\40\1\7\1\23\1\26\1\22\1\27\1\2\1\33\1\32"+
    "\1\21\1\41\1\34\1\2\1\31\1\20\1\71\1\2\1\25\1\35"+
    "\1\24\1\30\1\72\1\36\1\4\1\37\1\2\1\62\1\0\1\63"+
    "\1\56\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\5\0\1\2\1\3\1\4\1\3\2\4"+
    "\1\5\1\6\2\1\15\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\2\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\4\1\30"+
    "\1\31\1\4\1\32\1\33\1\34\1\35\3\1\2\36"+
    "\1\37\1\0\1\40\2\41\2\2\1\37\1\40\1\42"+
    "\3\0\2\4\1\43\1\44\1\45\1\4\1\46\10\4"+
    "\1\47\7\4\1\50\7\4\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\4\1\0"+
    "\2\1\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\2\0\1\102\1\103\2\3\1\104\3\4\1\105\5\4"+
    "\1\106\5\4\1\107\1\110\3\4\1\111\6\4\1\112"+
    "\2\4\1\113\1\0\3\4\1\114\2\4\1\115\1\116"+
    "\1\117\1\4\1\120\5\4\1\121\6\4\1\122\1\0"+
    "\1\123\1\4\1\124\1\4\1\125\1\126\4\4\1\127"+
    "\1\4\1\130\1\131\1\4\1\132\1\4\1\0\1\133"+
    "\1\4\1\134\1\135\2\4\1\136\1\137\1\140\1\0"+
    "\2\4\1\141\1\0\1\142\1\143\1\0\1\144";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u01ce\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u01ce\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u0a50\0\u01ce\0\u01ce\0\u0a92\0\u01ce\0\u0ad4\0\u01ce\0\u01ce"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u01ce\0\u0c1e\0\u0c60\0\u01ce"+
    "\0\u0ca2\0\u01ce\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u01ce\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u01ce\0\u01ce\0\u01ce\0\u0f36"+
    "\0\u0252\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104"+
    "\0\u1146\0\u0252\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\u1314\0\u0252\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u162c\0\u166e"+
    "\0\u01ce\0\u0dec\0\u0e2e\0\u0e70\0\u0252\0\u16b0\0\u16f2\0\u1734"+
    "\0\u0252\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u0252\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u0252\0\u0252\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u0252\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u0252\0\u1c5c\0\u1c9e\0\u01ce\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u0252\0\u1de8\0\u1e2a\0\u0252\0\u0252\0\u0252\0\u1e6c\0\u0252"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u0252\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u0252\0\u2184\0\u0252\0\u21c6"+
    "\0\u0252\0\u2208\0\u0252\0\u0252\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u0252\0\u2352\0\u0252\0\u0252\0\u2394\0\u0252\0\u23d6\0\u2418"+
    "\0\u0252\0\u245a\0\u0252\0\u0252\0\u249c\0\u24de\0\u0252\0\u0252"+
    "\0\u0252\0\u2520\0\u2562\0\u25a4\0\u0252\0\u25e6\0\u0252\0\u0252"+
    "\0\u2628\0\u01ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\2\12\1\15\1\12"+
    "\1\11\1\16\1\17\1\12\1\20\2\21\1\22\1\12"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\12\1\31"+
    "\1\32\1\12\1\33\1\34\1\35\1\12\1\36\1\12"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\2\10\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\12\1\64"+
    "\1\65\1\66\1\67\1\70\3\12\15\71\2\21\27\71"+
    "\1\72\33\71\15\73\1\74\1\75\63\73\15\76\2\0"+
    "\31\76\1\77\23\76\1\100\2\0\3\76\15\10\1\101"+
    "\1\102\40\10\1\103\14\10\1\104\5\10\15\105\1\101"+
    "\1\102\56\105\1\106\4\105\15\76\2\0\31\76\1\77"+
    "\23\76\2\0\1\107\3\76\103\0\1\11\1\0\1\11"+
    "\5\0\1\11\1\0\2\110\5\0\1\110\60\0\11\12"+
    "\2\0\1\12\3\0\22\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\1\11\1\0\1\11\2\111\1\0"+
    "\2\112\1\11\1\0\2\110\5\0\1\110\60\0\11\12"+
    "\2\0\1\12\3\0\1\113\21\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\5\12\1\114\14\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\1\11\1\0\1\13\5\0\1\11\32\0"+
    "\1\115\10\0\1\116\37\0\1\117\104\0\1\21\64\0"+
    "\6\12\1\120\2\12\2\0\1\12\3\0\5\12\1\121"+
    "\2\12\1\122\11\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\11\12\1\123"+
    "\2\12\1\124\5\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\1\125\17\12"+
    "\1\126\1\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\5\12\1\127\5\12"+
    "\1\130\6\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\131\17\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\1\132\1\12\1\133\17\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\1\134\7\12\1\135\1\12\1\136\5\12"+
    "\1\137\1\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\1\140\7\12\1\141"+
    "\11\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\7\12\1\142\5\12\1\143"+
    "\4\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\1\144\21\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\10\12\1\145\5\12\1\146\3\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\13\12\1\147\6\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\11\12"+
    "\1\150\3\12\1\151\4\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\43\0\1\152\1\153\101\0\1\154\10\0"+
    "\1\155\1\156\1\157\23\0\1\11\1\0\1\13\5\0"+
    "\1\11\32\0\1\160\101\0\1\161\101\0\1\162\1\0"+
    "\1\163\1\65\76\0\1\164\101\0\1\165\17\0\1\166"+
    "\67\0\1\167\73\0\1\170\101\0\1\171\10\0\1\170"+
    "\70\0\1\172\36\0\11\12\2\0\1\12\3\0\22\12"+
    "\22\0\1\173\1\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\1\174\21\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\74\0\1\175\5\0"+
    "\15\71\1\0\1\21\27\71\1\0\33\71\15\176\1\0"+
    "\1\21\27\176\1\177\1\75\32\176\15\73\2\0\63\73"+
    "\16\0\1\75\63\0\15\76\2\0\31\76\1\0\23\76"+
    "\3\0\3\76\24\0\1\200\1\201\3\0\1\202\16\0"+
    "\1\203\23\0\1\204\1\205\1\206\21\0\1\102\145\0"+
    "\1\207\113\0\1\210\5\0\15\105\2\0\56\105\1\0"+
    "\4\105\75\0\1\211\5\0\1\212\1\0\1\212\5\0"+
    "\1\212\71\0\1\213\1\0\1\213\2\0\4\213\2\0"+
    "\1\213\5\0\2\213\2\0\2\213\10\0\1\213\44\0"+
    "\1\214\5\0\1\214\71\0\11\12\2\0\1\12\3\0"+
    "\5\12\1\215\14\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\2\12\1\216"+
    "\17\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\1\12\1\217\20\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\4\12\1\220\15\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\6\12\1\221\13\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\15\12\1\222"+
    "\4\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\11\12\1\223\10\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\4\12\1\224\10\12\1\225\4\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\10\12\1\226\6\12\1\227\2\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\2\12\1\230\2\12\1\231\4\12\1\232"+
    "\7\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\3\12\1\233\1\234\15\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\7\12\1\235\12\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\5\12\1\236\14\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\11\12"+
    "\1\237\10\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\11\12\1\240\10\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\14\12\1\241\5\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\4\12\1\242\15\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\14\12"+
    "\1\243\5\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\11\12\1\244\10\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\3\12\1\245\16\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\22\12\24\0\1\12\2\0\1\246\1\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\12\12\1\247"+
    "\7\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\12\12\1\250\7\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\6\12\1\251\13\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\15\12\1\252\4\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\12\12\1\253"+
    "\7\12\24\0\1\12\2\0\2\12\4\0\3\12\74\0"+
    "\1\254\5\0\15\176\1\0\1\21\27\176\2\0\47\176"+
    "\1\0\1\21\27\176\1\177\1\0\32\176\77\0\1\255"+
    "\76\0\1\100\6\0\11\12\2\0\1\12\3\0\20\12"+
    "\1\256\1\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\2\12\1\257\17\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\2\12\1\260\17\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\261\17\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\4\12"+
    "\1\262\15\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\3\12\1\263\16\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\2\12\1\264\17\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\265\17\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\11\12"+
    "\1\266\10\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\1\267\21\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\15\12\1\270\4\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\1\271\21\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\10\12\1\272\11\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\3\12\1\273\16\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\20\12\1\274\1\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\15\12"+
    "\1\275\4\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\14\12\1\276\5\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\10\12\1\277\11\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\20\12\1\300\1\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\2\12"+
    "\1\301\17\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\1\0\11\12\2\0\1\12\3\0\4\12\1\302\15\12"+
    "\24\0\1\12\2\0\2\12\4\0\3\12\1\0\11\12"+
    "\2\0\1\12\3\0\14\12\1\303\5\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\304\17\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\6\12"+
    "\1\305\13\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\100\0\1\306\2\0\11\12\2\0\1\12\3\0\21\12"+
    "\1\307\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\3\12\1\310\16\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\5\12\1\311\14\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\12\12\1\312\7\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\13\12\1\313"+
    "\6\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\16\12\1\314\3\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\5\12\1\315\14\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\5\12\1\316\14\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\4\12\1\317"+
    "\15\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\14\12\1\320\5\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\2\12\1\321\17\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\14\12\1\322\5\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\14\12\1\323"+
    "\5\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\5\12\1\324\14\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\3\12\1\325\16\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\2\12\1\326\17\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\5\12\1\327"+
    "\14\12\24\0\1\12\2\0\2\12\4\0\3\12\101\0"+
    "\1\330\1\0\11\12\2\0\1\12\3\0\4\12\1\331"+
    "\15\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\11\12\1\332\10\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\6\12\1\333\13\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\11\12\1\334\10\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\12\12\1\335"+
    "\7\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\14\12\1\336\5\12\24\0"+
    "\1\12\2\0\2\12\4\0\3\12\1\0\11\12\2\0"+
    "\1\12\3\0\14\12\1\337\5\12\24\0\1\12\2\0"+
    "\2\12\4\0\3\12\1\0\11\12\2\0\1\12\3\0"+
    "\13\12\1\340\6\12\24\0\1\12\2\0\2\12\4\0"+
    "\3\12\1\0\11\12\2\0\1\12\3\0\4\12\1\341"+
    "\15\12\24\0\1\12\2\0\2\12\4\0\3\12\63\0"+
    "\1\342\17\0\11\12\2\0\1\12\3\0\10\12\1\343"+
    "\11\12\24\0\1\12\2\0\2\12\4\0\3\12\1\0"+
    "\11\12\2\0\1\12\3\0\1\344\21\12\24\0\1\12"+
    "\2\0\2\12\4\0\3\12\1\0\11\12\2\0\1\12"+
    "\3\0\17\12\1\345\2\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\13\0\1\346\67\0\11\12\2\0\1\12"+
    "\3\0\2\12\1\347\17\12\24\0\1\12\2\0\2\12"+
    "\4\0\3\12\1\0\11\12\2\0\1\12\3\0\11\12"+
    "\1\350\10\12\24\0\1\12\2\0\2\12\4\0\3\12"+
    "\46\0\1\351\121\0\1\352\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9834];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\5\0\1\11\10\1\1\11\15\1\1\11"+
    "\13\1\6\11\1\1\2\11\1\1\1\11\1\1\2\11"+
    "\4\1\1\11\1\1\1\0\1\11\1\1\1\11\4\1"+
    "\1\11\3\0\2\1\3\11\32\1\22\11\1\1\1\0"+
    "\2\1\7\11\2\0\1\11\42\1\1\11\1\0\30\1"+
    "\1\0\21\1\1\0\11\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private static final String lineSeparator = "\n";
	private int token;
	private String value;
	private final StringBuilder string = new StringBuilder();
	
	public boolean advance() throws java.io.IOException {
		token = yylex();
		return token != YYEOF;
	}
	
	public int token() {
		return token;
	}
	
	public String value() {
		return value;
	}
	
	private void errorInvalidChars(String text) {
		throw ExceptionProvider.newParseExceptionByInvalidChars(text, ParserHelper.getHexCode(text), yyline, yycolumn);
	}
	
	private void errorStringNotTerminated(String name) {
		throw ExceptionProvider.newParseExceptionByStringNotTerminated(name, yyline, yycolumn);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return Parser.AND;
          }
        case 101: break;
        case 84: 
          { return Parser.OUTER;
          }
        case 102: break;
        case 45: 
          { return Parser.RFIND;
          }
        case 103: break;
        case 44: 
          { return Parser.RIGHT_DARROW;
          }
        case 104: break;
        case 71: 
          { return Parser.DEF;
          }
        case 105: break;
        case 19: 
          { return Parser.RP;
          }
        case 106: break;
        case 51: 
          { return Parser.ASSIGN_TRUEDIV;
          }
        case 107: break;
        case 9: 
          { return Parser.ASSIGN;
          }
        case 108: break;
        case 86: 
          { return Parser.THROW;
          }
        case 109: break;
        case 22: 
          { return Parser.LBT;
          }
        case 110: break;
        case 35: 
          { return Parser.ASSIGN_SUB;
          }
        case 111: break;
        case 4: 
          { value = yytext(); return Parser.IDENTIFIER;
          }
        case 112: break;
        case 69: 
          { return Parser.END;
          }
        case 113: break;
        case 15: 
          { return Parser.QUESTION;
          }
        case 114: break;
        case 78: 
          { return Parser.TRUE;
          }
        case 115: break;
        case 50: 
          { yybegin(BLOCK_COMMENT);
          }
        case 116: break;
        case 5: 
          { return Parser.MINUS;
          }
        case 117: break;
        case 97: 
          { return Parser.FINALLY;
          }
        case 118: break;
        case 37: 
          { return Parser.DOT2;
          }
        case 119: break;
        case 57: 
          { return Parser.GTEQ;
          }
        case 120: break;
        case 61: 
          { string.append('\n');
          }
        case 121: break;
        case 3: 
          { value = yytext(); return Parser.INTEGER;
          }
        case 122: break;
        case 63: 
          { string.append('\"');
          }
        case 123: break;
        case 82: 
          { return Parser.VOID;
          }
        case 124: break;
        case 56: 
          { return Parser.LTEQ;
          }
        case 125: break;
        case 18: 
          { return Parser.LP;
          }
        case 126: break;
        case 23: 
          { return Parser.RBT;
          }
        case 127: break;
        case 92: 
          { return Parser.RECORD;
          }
        case 128: break;
        case 7: 
          { return Parser.ATMARK;
          }
        case 129: break;
        case 46: 
          { return Parser.RREPL;
          }
        case 130: break;
        case 60: 
          { string.append('\r');
          }
        case 131: break;
        case 14: 
          { return Parser.MOD;
          }
        case 132: break;
        case 43: 
          { return Parser.EQ;
          }
        case 133: break;
        case 48: 
          { return Parser.ASSIGN_MUL;
          }
        case 134: break;
        case 68: 
          { return Parser.XOR;
          }
        case 135: break;
        case 67: 
          { value = yytext(); return Parser.DECIMAL;
          }
        case 136: break;
        case 29: 
          { string.setLength(0); yybegin(LINE_SYMBOL);
          }
        case 137: break;
        case 21: 
          { return Parser.RB;
          }
        case 138: break;
        case 90: 
          { return Parser.WHILE;
          }
        case 139: break;
        case 64: 
          { string.append('\'');
          }
        case 140: break;
        case 12: 
          { return Parser.DIV;
          }
        case 141: break;
        case 88: 
          { return Parser.LOCAL;
          }
        case 142: break;
        case 42: 
          { return Parser.NEWSLOT;
          }
        case 143: break;
        case 36: 
          { return Parser.RIGHT_ARROW;
          }
        case 144: break;
        case 59: 
          { string.append('\t');
          }
        case 145: break;
        case 58: 
          { return Parser.SET_LBT;
          }
        case 146: break;
        case 25: 
          { return Parser.SEMICOLON;
          }
        case 147: break;
        case 8: 
          { return Parser.COLON;
          }
        case 148: break;
        case 2: 
          { errorInvalidChars(yytext());
          }
        case 149: break;
        case 83: 
          { return Parser.BREAK;
          }
        case 150: break;
        case 65: 
          { string.append('`');
          }
        case 151: break;
        case 66: 
          { string.append( "\'" );
          }
        case 152: break;
        case 10: 
          { return Parser.PLUS;
          }
        case 153: break;
        case 6: 
          { return Parser.DOT;
          }
        case 154: break;
        case 81: 
          { return Parser.NULL;
          }
        case 155: break;
        case 20: 
          { return Parser.LB;
          }
        case 156: break;
        case 55: 
          { return Parser.NEQ;
          }
        case 157: break;
        case 28: 
          { string.setLength(0); yybegin(SIMPLE_STRING);
          }
        case 158: break;
        case 89: 
          { return Parser.SUPER;
          }
        case 159: break;
        case 85: 
          { return Parser.CATCH;
          }
        case 160: break;
        case 24: 
          { return Parser.COMMA;
          }
        case 161: break;
        case 16: 
          { return Parser.LT;
          }
        case 162: break;
        case 33: 
          { string.append( lineSeparator );
          }
        case 163: break;
        case 93: 
          { return Parser.RETURN;
          }
        case 164: break;
        case 91: 
          { return Parser.OBJECT;
          }
        case 165: break;
        case 96: 
          { return Parser.ASSERT;
          }
        case 166: break;
        case 39: 
          { return Parser.DO;
          }
        case 167: break;
        case 53: 
          { return Parser.MAP_LBT;
          }
        case 168: break;
        case 95: 
          { return Parser.SWITCH;
          }
        case 169: break;
        case 30: 
          { yybegin(YYINITIAL);
          }
        case 170: break;
        case 62: 
          { string.append('\\');
          }
        case 171: break;
        case 73: 
          { return Parser.NOT;
          }
        case 172: break;
        case 17: 
          { return Parser.GT;
          }
        case 173: break;
        case 26: 
          { yybegin(LINE_COMMENT);
          }
        case 174: break;
        case 52: 
          { return Parser.ASSIGN_MOD;
          }
        case 175: break;
        case 27: 
          { string.setLength(0); yybegin(LINE_STRING);
          }
        case 176: break;
        case 32: 
          { value = string.toString(); yybegin(YYINITIAL); return Parser.STRING;
          }
        case 177: break;
        case 11: 
          { return Parser.MUL;
          }
        case 178: break;
        case 75: 
          { string.setLength(0); yybegin(BLOCK_STRING);
          }
        case 179: break;
        case 34: 
          { value = string.toString(); yybegin(YYINITIAL); return Parser.IDENTIFIER;
          }
        case 180: break;
        case 38: 
          { return Parser.OR;
          }
        case 181: break;
        case 13: 
          { return Parser.TRUEDIV;
          }
        case 182: break;
        case 47: 
          { return Parser.ASSIGN_ADD;
          }
        case 183: break;
        case 49: 
          { return Parser.ASSIGN_DIV;
          }
        case 184: break;
        case 87: 
          { return Parser.FALSE;
          }
        case 185: break;
        case 72: 
          { return Parser.FOR;
          }
        case 186: break;
        case 98: 
          { return Parser.CONTINUE;
          }
        case 187: break;
        case 76: 
          { return Parser.ELSE;
          }
        case 188: break;
        case 41: 
          { return Parser.COLON2;
          }
        case 189: break;
        case 31: 
          { string.append( yytext() );
          }
        case 190: break;
        case 79: 
          { return Parser.THEN;
          }
        case 191: break;
        case 100: 
          { string.append(1 <= yytext().length() ? yytext().substring(1) : yytext());
          }
        case 192: break;
        case 77: 
          { return Parser.CASE;
          }
        case 193: break;
        case 54: 
          { return Parser.IFNULL;
          }
        case 194: break;
        case 99: 
          { return Parser.FUNCTION;
          }
        case 195: break;
        case 40: 
          { return Parser.IF;
          }
        case 196: break;
        case 80: 
          { return Parser.THIS;
          }
        case 197: break;
        case 70: 
          { return Parser.TRY;
          }
        case 198: break;
        case 94: 
          { return Parser.ISNULL;
          }
        case 199: break;
        case 1: 
          { 
          }
        case 200: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case LINE_SYMBOL: {
              errorStringNotTerminated("symbol");
            }
            case 235: break;
            case BLOCK_COMMENT: {
              errorStringNotTerminated("comment");
            }
            case 236: break;
            case BLOCK_STRING: {
              errorStringNotTerminated("string");
            }
            case 237: break;
            case SIMPLE_STRING: {
              errorStringNotTerminated("string");
            }
            case 238: break;
            case LINE_STRING: {
              errorStringNotTerminated("string");
            }
            case 239: break;
            default:
              { 	return YYEOF;
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
