// created by jay 1.1.0 (c) 2002-2006 ats@cs.rit.edu
// skeleton Java 1.1.0 (c) 2002-2006 ats@cs.rit.edu

					// line 1 "src/anubis/parser/anubis.jay"


package anubis.parser;
import java.io.*;
import java.util.*;
import anubis.*;
import anubis.ast.*;
import anubis.except.*;
import anubis.runtime.*;
import anubis.runtime.util.*;

@SuppressWarnings({
	"unchecked", "serial"
})
public class Parser {

					// line 22 "-"
  // %token constants
  public static final int OBJECT = 257;
  public static final int RECORD = 258;
  public static final int FUNCTION = 259;
  public static final int DEF = 260;
  public static final int IF = 261;
  public static final int THEN = 262;
  public static final int ELSE = 263;
  public static final int FOR = 264;
  public static final int WHILE = 265;
  public static final int DO = 266;
  public static final int TRY = 267;
  public static final int CATCH = 268;
  public static final int FINALLY = 269;
  public static final int SWITCH = 270;
  public static final int CASE = 271;
  public static final int ASSERT = 272;
  public static final int END = 273;
  public static final int BREAK = 274;
  public static final int CONTINUE = 275;
  public static final int THROW = 276;
  public static final int RETURN = 277;
  public static final int ATMARK = 278;
  public static final int OWATA = 279;
  public static final int NEWSLOT = 280;
  public static final int ASSIGN = 281;
  public static final int ASSIGN_ADD = 282;
  public static final int ASSIGN_SUB = 283;
  public static final int ASSIGN_MUL = 284;
  public static final int ASSIGN_DIV = 285;
  public static final int ASSIGN_MOD = 286;
  public static final int ASSIGN_TRUEDIV = 287;
  public static final int QUESTION = 288;
  public static final int COLON = 289;
  public static final int OR = 290;
  public static final int XOR = 291;
  public static final int AND = 292;
  public static final int EQ = 293;
  public static final int NEQ = 294;
  public static final int LT = 295;
  public static final int LTEQ = 296;
  public static final int GT = 297;
  public static final int GTEQ = 298;
  public static final int RFIND = 299;
  public static final int RREPL = 300;
  public static final int IFNULL = 301;
  public static final int PLUS = 302;
  public static final int MINUS = 303;
  public static final int MUL = 304;
  public static final int DIV = 305;
  public static final int MOD = 306;
  public static final int TRUEDIV = 307;
  public static final int UPLUS = 308;
  public static final int UMINUS = 309;
  public static final int NOT = 310;
  public static final int ISNULL = 311;
  public static final int DOT = 312;
  public static final int RIGHT_DARROW = 313;
  public static final int RIGHT_ARROW = 314;
  public static final int LP = 315;
  public static final int RP = 316;
  public static final int LB = 317;
  public static final int RB = 318;
  public static final int LBT = 319;
  public static final int RBT = 320;
  public static final int MAP_LBT = 321;
  public static final int SET_LBT = 322;
  public static final int COMMA = 323;
  public static final int SEMICOLON = 324;
  public static final int DOT2 = 325;
  public static final int COLON2 = 326;
  public static final int THIS = 327;
  public static final int SUPER = 328;
  public static final int OUTER = 329;
  public static final int LOCAL = 330;
  public static final int IDENTIFIER = 331;
  public static final int INTEGER = 332;
  public static final int DECIMAL = 333;
  public static final int STRING = 334;
  public static final int CHAR = 335;
  public static final int NULL = 336;
  public static final int VOID = 337;
  public static final int TRUE = 338;
  public static final int FALSE = 339;
  public static final int REGEX = 340;
  public static final int yyErrorCode = 256;

  /** number of final state.
    */
  protected static final int yyFinal = 35;

  /** parser tables.
      Order is mandated by <i>jay</i>.
    */
  protected static final short[] yyLhs = {
//yyLhs 145
    -1,     0,     0,    16,    16,    17,    17,    18,    18,    18,
    18,    18,    18,    18,    18,    18,    18,    18,    18,    18,
    18,    18,    18,     3,     3,    19,    19,    19,    19,    19,
    20,    20,    21,    22,    22,    23,     7,     7,     8,     8,
     9,     9,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    26,    26,    26,    15,    15,
    15,    15,    15,    15,    15,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    24,    24,    25,    25,    12,    13,    13,    27,
    28,    28,    29,    29,    30,    30,    30,    14,    14,     6,
     6,     6,     6,     6,     6,     6,     6,     6,     4,     4,
     5,     5,     1,     1,     2,
    }, yyLen = {
//yyLen 145
     2,     1,     1,     0,     1,     1,     2,     1,     2,     5,
     7,     5,     5,     7,     9,     7,     8,     6,    10,     6,
     3,     4,     1,     0,     2,     1,     2,     2,     2,     2,
     0,     1,     2,     1,     2,     4,     0,     1,     1,     3,
     0,     1,     1,     3,     2,     2,     2,     2,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     4,
     6,     4,     6,     5,     5,     1,     2,     4,     1,     1,
     1,     3,     3,     3,     4,     1,     1,     1,     1,     1,
     1,     3,     3,     3,     4,     5,     6,     7,     1,     1,
     1,     1,     0,     1,     3,     5,     4,     7,     5,     4,
     0,     1,     1,     3,     1,     1,     4,     3,     4,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
     1,     3,     0,     1,     1,
    }, yyDefRed = {
//yyDefRed 283
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    22,     0,     0,     0,     0,     0,     0,     0,     0,
     7,    96,     0,     0,    99,     0,   133,   134,   135,   137,
   130,   129,   131,   132,   136,     0,     0,     0,   100,     0,
    42,   108,   109,   111,     0,     2,     0,     5,     0,   110,
     0,     0,     0,     0,     0,     0,     0,     0,   144,    27,
   143,    28,    29,     0,    26,     0,     0,     0,     0,   140,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     6,     0,
     8,     0,     0,   124,     0,     0,   122,     0,     0,   127,
     0,     0,    20,     0,    43,     0,     0,   101,     0,     0,
     0,   102,     0,   103,     0,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    76,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
     0,   119,     0,     0,     0,   128,     0,    21,     0,   141,
     0,   104,     0,     0,     0,     0,     0,    79,     0,     0,
     0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   123,     0,    12,   118,
     0,   105,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    31,    34,     0,     0,     0,    84,    83,     0,
     9,     0,    11,   126,     0,   106,     0,     0,    87,     0,
     0,     0,     0,    17,     0,    19,    80,    82,     0,   117,
   107,    13,     0,    15,     0,     0,    10,     0,     0,    16,
    14,     0,    18,
    }, yyDgoto = {
//yyDgoto 31
    35,    59,    36,    37,    70,    71,    38,   145,    73,    62,
   117,    40,    41,    42,    43,    44,    45,    46,    47,    48,
   241,   242,   214,   215,    76,    77,   146,    49,   124,   125,
   126,
    }, yySindex = {
//yySindex 283
  2649,  -290,  -262,  -258,  2860,  -256,  2860,  -250,  -250,  2860,
  2860,     0,  2860,  2860,  2860,  2860,  -250,  2860,  2860,  2860,
     0,     0,     0,     0,     0,  -235,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    74,     0,  3415,
     0,     0,     0,     0,   706,     0,  2649,     0,  -275,     0,
  2649,  1001,  -250,  -242,  3415,   770,  2229,  2913,     0,     0,
     0,     0,     0,  3415,     0,  -241,  -241,  -241,  3231,     0,
  -240,  -236,  -238,  -214,  2390,  3261,  -198,  -189,  -193,  3415,
     0,  2735,  2860,  -250,  2860,  2649,  2860,  2860,  2860,  2860,
  2860,  2860,  2860,  2860,  2860,  2860,  2860,  2860,  2860,  2860,
  2860,  2860,  2860,  2860,  2860,  2860,     0,  -196,  2774,  2860,
  2860,  2860,  2860,  2860,  2860,  2860,  2860,  3415,     0,  -116,
     0,  -180,  -176,     0,  -171,  -151,     0,  -143,  2860,     0,
  2313,  2649,     0,   -89,     0,  2860,  -250,     0,  2860,  2688,
  2860,     0,  2860,     0,  2860,     0,  -130,  -137,   -98,  2955,
  2061,  2054,  3293,  3444,  2637,  -259,  3469,  3469,  -105,  -105,
  -105,  -105,  1596,  3323,   -60,   -79,   -79,  -241,  -241,  -241,
  -241,     0,     0,     0,  -123,     0,  2860,  2138,  3415,  3415,
  3415,  3415,  3415,  3415,  3415,  3415,  2860,  -250,  2860,     0,
  -129,     0,  1001,  -109,  2559,     0,  2649,     0,  3353,     0,
  3415,     0,  2860,  2475,  3415,  3385,  2222,     0,  2649,  2860,
  2649,  -250,  2649,   590,  -213,     0,  2860,  2860,  2735,  2306,
     0,  2821,  3027,   -80,  3062,  -110,     0,  2649,     0,     0,
  3132,     0,  2860,  2860,  2860,  2397,  2997,  2397,   -54,  2481,
   -49,   -58,     0,     0,  3415,  -103,   -99,     0,     0,  3165,
     0,  2860,     0,     0,   -97,     0,  3198,  3415,     0,   -44,
  2649,   -43,  2649,     0,  2649,     0,     0,     0,  3097,     0,
     0,     0,  2397,     0,  2145,  2649,     0,   -35,  2649,     0,
     0,  2565,     0,
    }, yyRindex = {
//yyRindex 283
     4,     0,     0,     0,     0,     0,     0,  -268,  -268,  -265,
  -265,     0,     0,     0,     0,     0,   -90,   -72,   -71,   -72,
     0,     0,     1,    65,     0,  2004,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   129,     0,     0,    51,
     0,     0,     0,     0,     0,     0,   529,     0,     0,     0,
  -239,   -87,   -66,   193,     0,     0,   260,     0,     0,     0,
     0,     0,     0,  -260,     0,   578,   643,   707,     0,     0,
     0,  -135,     0,  -192,  -257,     0,     0,   -62,     0,  -248,
     0,   -56,     0,     0,     0,   260,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -255,     0,     0,
     0,     0,  -294,     0,     0,   -64,     0,     0,     0,     0,
   260,   260,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,     0,     0,  1687,  1648,  1604,  1521,  1560,  1220,  1285,
  1349,  1413,  1477,     0,  1156,  1028,  1092,   771,   835,   899,
   964,     0,   257,   322,   193,   386,     0,     0,  1717,  1754,
  1782,  1819,  1847,  1860,  1888,  1925,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   132,     0,     0,     0,
  -197,     0,     0,     0,  -184,     0,   -46,     0,   260,     0,
   260,     0,   260,     0,   -11,     0,     0,     0,   -56,     0,
   450,     0,     0,     0,     0,     0,     0,  -239,     0,     0,
     0,     0,     0,     0,   -56,   196,     0,   196,     0,   260,
     0,     0,     0,     0,  1955,   514,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -140,     0,     0,
   260,     0,   260,     0,   260,     0,     0,     0,     0,     0,
     0,     0,   196,     0,   260,   587,     0,     0,   260,     0,
     0,   260,     0,
    }, yyGindex = {
//yyGindex 31
     0,   258,    69,     0,   221,     0,   -42,   -12,     0,   265,
     2,     0,     0,     0,     0,   272,   -50,   -23,  1354,     0,
  -205,   220,     0,    64,     0,     0,    91,     0,     0,     0,
   118,
    }, yyTable = {
//yyTable 3789
   121,    97,    39,   119,     3,    72,    54,    78,    57,   123,
   142,    63,    63,    40,    65,    66,    67,    68,    41,    74,
    75,    79,    23,    25,   125,    23,    23,    50,    23,   125,
   259,    23,   261,   130,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   120,
   131,     1,   106,   107,    80,    51,   142,    52,   213,    40,
   108,    56,   150,    38,    41,    98,    38,   277,    38,    25,
   106,   107,    38,    81,   135,    38,    60,    60,   108,     3,
    81,    58,   137,    79,   147,    69,   149,   136,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   196,   138,
   177,   178,   179,   180,   181,   182,   183,   184,   185,    39,
   122,    69,   141,    39,    37,   208,    39,   143,    37,    95,
   194,   171,   172,   173,   142,   174,   114,   198,   189,   114,
   200,   203,   204,   190,   205,   186,   206,   191,   187,   188,
   123,    87,   148,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   240,   192,   193,   106,   107,   175,   254,   219,   139,
   115,   139,   108,   115,   197,   235,   207,   237,   222,   239,
   224,   209,   218,   144,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   225,   230,   199,   106,   107,   227,   251,
   253,   236,   262,   264,   108,   265,   108,   266,   244,   245,
    79,   269,   258,   249,   138,   102,   103,   104,   105,   271,
   273,   120,   106,   107,   256,   257,    79,   272,   280,   274,
   108,   275,   100,   101,   102,   103,   104,   105,    36,   112,
   138,   106,   107,   268,   121,   281,   223,    77,   113,   108,
    36,   122,    30,    97,    97,    23,    61,    97,    23,    23,
    86,    23,    97,   127,    23,    64,    55,   133,   243,    97,
   238,    89,    89,    89,    89,    89,    89,    89,    89,    97,
    97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
    97,    97,    97,    97,    97,    97,    97,    97,    97,   246,
   226,     0,    97,    97,     0,    97,     0,    97,     0,    97,
    97,    97,    78,     0,    97,    97,    97,    98,    98,    25,
     0,    98,     0,     0,     0,    82,    98,     0,    83,    84,
     0,    85,     0,    98,    86,    90,    90,    90,    90,    90,
    90,    90,    90,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,     0,     0,    25,    98,    98,     0,    98,
     0,    98,     0,    98,    98,    98,    75,     0,    98,    98,
    98,    95,    95,    23,     0,    95,    23,    23,     0,    23,
    95,     0,    23,     0,     0,    32,     0,    95,     0,    88,
    88,    88,    88,    88,    88,    88,    88,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,     0,     0,     0,
    95,    95,     0,    95,     0,    95,     0,    95,    95,    95,
    81,     0,    95,    95,    95,   144,   144,    23,     0,   144,
    23,    23,     0,    23,   144,     0,    23,     0,     0,    30,
     0,   144,     0,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,     0,     0,     0,   144,   144,     0,   144,     0,   144,
     0,   144,   144,   144,    56,     0,   144,   144,   144,    77,
    77,    23,     0,    77,    23,    23,     0,    23,    77,     4,
    23,     0,     0,     0,     0,    77,     0,    92,    92,    92,
    92,    92,    92,    92,    92,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,     0,     0,     0,    77,    77,
     0,    77,     0,    77,     0,    77,    77,    77,    44,     0,
    77,    77,    77,     0,    78,    78,     0,     0,    78,     0,
     0,     0,     0,    78,     0,     0,     0,     0,     0,     0,
    78,     0,    93,    93,    93,    93,    93,    93,    93,    93,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
     0,     0,     0,    78,    78,     0,    78,     0,    78,     0,
    78,    78,    78,    45,     0,    78,    78,    78,    75,    75,
     0,     0,    75,     0,     0,     0,     0,    75,     0,     0,
     0,     0,     0,     0,    75,     0,    91,    91,    91,    91,
    91,    91,    91,    91,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,     0,     0,     0,    75,    75,     0,
    75,     0,    75,     0,    75,    75,    75,    46,     0,    75,
    75,    75,    81,    81,     0,     0,    81,     0,     0,     0,
     0,    81,     0,     0,     0,     0,     0,     0,    81,     0,
    94,    94,    94,    94,    94,    94,    94,    94,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,     0,     0,
     0,    81,    81,     0,    81,     0,    81,     0,    81,    81,
    81,    48,     0,    81,    81,    81,    56,    56,     0,     0,
    56,     0,     0,     0,     0,    56,     0,     0,     0,     0,
    23,     0,    56,    23,    23,     0,    23,     0,     0,    23,
     0,     0,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,     0,     0,     0,    56,    56,     0,    56,     0,
    56,     0,    56,     0,    56,    49,     0,    56,    56,    56,
    44,    44,     0,     0,    44,     0,     0,     4,    23,    44,
    35,    23,    23,     0,    23,     0,    44,    23,    35,     0,
    35,     0,     0,     0,     0,     0,    44,    44,    44,    44,
    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
    44,    44,    44,    44,    44,    44,     0,     0,     0,     0,
     0,     0,    44,     0,    44,     0,    44,     0,    44,    50,
     0,    44,    44,    44,     0,    45,    45,     0,     0,    45,
     0,     0,     0,     0,    45,     0,     0,     0,     0,     0,
     0,    45,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    45,    45,    45,    45,    45,    45,    45,    45,    45,
    45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
    45,     0,     0,     0,     0,     0,     0,    45,     0,    45,
     0,    45,     0,    45,    51,     0,    45,    45,    45,    46,
    46,     0,     0,    46,     0,     0,     0,     0,    46,     0,
     0,     0,     0,     0,     0,    46,   109,   110,   111,   112,
   113,   114,   115,   116,     0,    46,    46,    46,    46,    46,
    46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
    46,    46,    46,    46,    46,     0,     0,     0,     0,     0,
     0,    46,     0,    46,     0,    46,     0,    46,    52,     0,
    46,    46,    46,    48,    48,     0,     0,    48,     0,     0,
     0,     0,    48,     0,     0,     0,     0,     0,     0,    48,
   109,   128,   111,   112,   113,   114,   115,   116,     0,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,     0,
     0,     0,     0,     0,     0,    48,     0,    48,     0,    48,
     0,    48,    53,     0,    48,    48,    48,    49,    49,     0,
     0,    49,     0,     0,     0,     0,    49,     0,     0,     0,
     0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,     0,     0,     0,     0,     0,     0,    49,
     0,    49,     0,    49,     0,    49,    54,     0,    49,    49,
    49,    50,    50,     0,     0,    50,     0,     0,     0,     0,
    50,     0,     0,     0,     0,     0,     0,    50,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    50,    50,    50,
    50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    50,    50,    50,    50,    50,    50,     0,     0,     0,
     0,     0,     0,    50,     0,    50,     0,    50,     0,    50,
    59,     0,    50,    50,    50,     0,    51,    51,     0,     0,
    51,     0,     0,     0,     0,    51,     0,     0,     0,     0,
     0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    51,    51,    51,    51,    51,    51,    51,    51,
    51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
    51,    51,     0,     0,     0,     0,     0,     0,    51,     0,
    51,     0,    51,     0,    51,    60,     0,    51,    51,    51,
    52,    52,     0,     0,    52,     0,     0,     0,     0,    52,
     0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    58,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    52,     0,    52,     0,    52,     0,    52,    61,
     0,    52,    52,    52,    53,    53,     0,     0,    53,     0,
     0,     0,     0,    53,     0,     0,     0,     0,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,     0,     0,     0,     0,
   118,     0,     0,     0,     0,     0,    53,     0,    53,     0,
    53,     0,    53,    62,     0,    53,    53,    53,    54,    54,
     0,     0,    54,     0,     0,     0,     0,    54,     0,     0,
     0,     0,     0,     0,    54,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    54,    54,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    54,     0,    54,     0,    54,     0,    54,    55,     0,    54,
    54,    54,    59,    59,   118,     0,    59,     0,     0,     0,
     0,    59,     0,     0,     0,     0,     0,     0,    59,     0,
     0,     0,     0,     0,   118,     0,     0,     0,    59,    59,
    59,    59,    59,    59,    59,    59,    59,    59,    59,     0,
     0,    57,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    59,     0,    59,     0,    59,     0,
    59,     0,     0,    59,    59,    59,     0,    60,    60,     0,
   118,    60,     0,     0,     0,     0,    60,     0,     0,     0,
    58,     0,     0,    60,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    60,    60,    60,    60,    60,    60,    60,
    60,    60,    60,    60,     0,     0,     0,     0,     0,   118,
     0,   118,     0,   118,     0,     0,     0,     0,     0,    60,
     0,    60,     0,    60,    63,    60,     0,     0,    60,    60,
    60,    61,    61,     0,     0,    61,     0,     0,     0,     0,
    61,     0,     0,     0,     0,     0,   118,    61,   118,   118,
     0,     0,     0,     0,     0,   118,     0,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    64,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    61,     0,    61,     0,    61,     0,    61,
     0,     0,    61,    61,    61,    62,    62,     0,     0,    62,
     0,     0,     0,     0,    62,     0,     0,    65,     0,     0,
     0,    62,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,    62,     0,     0,     0,     0,     0,    67,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    62,     0,    62,
     0,    62,     0,    62,     0,     0,    62,    62,    62,    55,
    55,     0,     0,    55,     0,     0,     0,     0,    55,     0,
     0,     0,     0,     0,    68,    55,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,     0,     0,     0,     0,
     0,     0,    69,    57,    57,     0,     0,    57,     0,     0,
     0,    55,    57,    55,     0,    55,     0,    55,     0,    57,
    55,    55,    55,     0,     0,     0,     0,     0,     0,    57,
    57,    57,    57,    57,    57,    57,     0,     0,     0,    70,
     0,     0,    58,    58,     0,     0,    58,     0,     0,     0,
     0,    58,     0,     0,     0,    57,     0,    57,    58,    57,
     0,    57,     0,     0,    57,    57,    57,    71,    58,    58,
    58,    58,    58,    58,    58,     0,     0,     0,     0,     0,
    72,     0,     0,     0,     0,     0,    63,    63,     0,     0,
    63,     0,     0,     0,    58,    63,    58,     0,    58,     0,
    58,     0,    63,    58,    58,    58,     0,     0,    74,     0,
     0,     0,    63,    63,    63,    63,    63,    99,   100,   101,
   102,   103,   104,   105,     0,     0,     0,   106,   107,     0,
    64,    64,     0,     0,    64,   108,     0,     0,    63,    64,
    63,     0,    63,     0,    63,    73,    64,    63,    63,    63,
     0,     0,     0,     0,     0,     0,    64,    64,    64,    64,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
    65,     0,     0,    65,     0,    66,     0,     0,    65,     0,
     0,     0,    64,     0,    64,    65,    64,     0,    64,     0,
     0,    64,    64,    64,     0,    65,    65,    65,     0,    67,
    67,     0,     0,    67,     0,     0,     0,     0,    67,     0,
     0,     0,     0,     0,     0,    67,     0,     0,     0,     0,
     0,    65,     0,    65,   144,    65,    67,    65,     0,     0,
    65,    65,    65,     0,     0,     0,    68,    68,     0,     0,
    68,     0,     0,     0,     0,    68,     0,     0,     0,     0,
     0,    67,    68,    67,     0,    67,     0,    67,     0,     0,
    67,    67,    67,    68,    69,    69,     0,     0,    69,     0,
     0,     0,     0,    69,     0,     0,     0,     0,     0,     0,
    69,     0,     0,     0,     0,     0,     0,     0,    68,     0,
    68,    69,    68,     0,    68,     0,     0,    68,    68,    68,
     0,    70,    70,     0,     0,    70,     0,     0,     0,     0,
    70,     0,     0,     0,     0,     0,    69,    70,    69,     0,
    69,     0,    69,     0,     0,    69,    69,    69,    70,    71,
    71,     0,     0,    71,     0,     0,     0,     0,    71,     0,
     0,     0,    72,    72,     0,    71,    72,     0,     0,     0,
     0,    72,     0,    70,     0,    70,    71,    70,    72,    70,
     0,     0,    70,    70,    70,     0,     0,     0,     0,    72,
    74,    74,     0,     0,    74,     0,     0,     0,     0,    74,
     0,    71,     0,    71,     0,    71,    74,    71,     0,     0,
    71,    71,    71,     0,    72,     0,    72,    74,    72,     0,
    72,     0,     0,    72,    72,    72,     0,    73,    73,     0,
     0,    73,     0,     0,     0,     0,    73,     0,     0,     0,
     0,     0,    74,    73,    74,     0,    74,     0,    74,     0,
     0,    74,    74,    74,    73,     0,     0,    66,    66,     0,
     0,    66,     0,     0,     0,     0,    66,     0,     0,     0,
     0,     0,     0,    66,     0,     0,     0,     0,     0,    73,
     0,    73,     0,    73,    66,    73,     0,     0,    73,    73,
    73,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    66,
     0,    66,     0,    66,     0,    66,     0,     0,    66,    66,
    66,     0,   144,     0,   144,   144,   144,   144,   144,   144,
   144,   144,   144,     0,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,     0,     0,     0,   144,   144,     0,     1,     2,
     3,     4,     0,   144,     0,   213,     0,     5,   144,   211,
   212,     0,     0,     6,     0,     7,     8,     9,    10,     0,
    11,     0,    87,     0,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,     0,    12,    13,   106,   107,     0,     0,     0,
     0,    14,     0,   108,     0,     0,    15,     0,    16,     0,
    17,     0,    18,    19,     0,    20,     0,     0,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,     1,     2,     3,     4,     0,     0,     0,     0,
     0,     5,     0,     0,   278,     0,     0,     6,   279,     7,
     8,     9,    10,     0,    11,     0,    87,     0,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,     0,    12,    13,   106,
   107,     0,     0,     0,     0,    14,     0,   108,   220,     0,
    15,     0,    16,   221,    17,     0,    18,    19,     0,    20,
     0,     0,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,     1,     2,     3,     4,
     0,     0,     0,     0,     0,     5,     0,     0,     0,     0,
     0,     6,     0,     7,     8,     9,    10,     0,    11,     0,
    87,     0,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     0,    12,    13,   106,   107,     0,     0,     0,     0,    14,
     0,   108,     0,     0,    15,   234,    16,   129,    17,     0,
    18,    19,     0,    20,     0,     0,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     1,     2,     3,     4,     0,     0,     0,     0,     0,     5,
     0,     0,     0,     0,     0,     6,     0,     7,     8,     9,
    10,     0,    11,     0,    87,     0,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,     0,    12,    13,   106,   107,     0,
     0,     0,     0,    14,     0,   108,   247,     0,    15,     0,
    16,   195,    17,     0,    18,    19,     0,    20,     0,     0,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,     1,     2,     3,     4,     0,     0,
   131,     0,     0,     5,     0,     0,     0,     0,     0,     6,
     0,     7,     8,     9,    10,     0,    11,     0,    87,     0,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,     0,    12,
    13,   106,   107,     0,     0,     0,     0,    14,     0,   108,
     0,     0,    15,     0,    16,   139,    17,     0,    18,    19,
     0,    20,     0,     0,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,     1,     2,
     3,     4,     0,     0,     0,     0,     0,     5,     0,     0,
     0,     0,     0,     6,   263,     7,     8,     9,    10,     0,
    11,     0,     0,    87,     0,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,    12,    13,     0,   106,   107,     0,     0,
     0,    14,     0,     0,   108,   231,    15,     0,    16,   232,
    17,     0,    18,    19,     0,    20,     0,     0,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,     1,     2,     3,     4,     0,     0,     0,     0,
     0,     5,     0,     0,     0,     0,     0,     6,   282,     7,
     8,     9,    10,     0,    11,     0,     0,    87,     0,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,    12,    13,     0,
   106,   107,     0,     0,     0,    14,     0,     0,   108,     0,
    15,     0,    16,   228,    17,     0,    18,    19,     0,    20,
     0,     0,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,     1,     2,     3,     4,
     0,     0,     0,     0,     0,     5,     0,     0,     0,     0,
     0,     6,     0,     7,     8,     9,    10,     0,    11,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,     1,     2,     3,   106,   107,
     0,    12,    13,     0,     5,     0,   108,     0,     0,    14,
     0,     0,     0,     0,    15,     0,    16,     0,    17,     0,
    18,    19,     0,    20,     0,     0,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    12,    13,     1,     2,     3,     0,     0,     0,    14,     0,
     0,     5,     0,    15,     0,    16,     0,    17,   201,    18,
    19,     0,   202,   144,     0,    21,    22,    23,    24,    53,
    26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
     0,     1,     2,     3,     0,     0,     0,    12,    13,     0,
     5,     0,     0,     0,     0,    14,     0,     0,     0,     0,
    15,     0,    16,     0,    17,     0,    18,    19,     0,     0,
     0,     0,    21,    22,    23,    24,    53,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    12,    13,     1,     2,
     3,     0,     0,     0,    14,     0,     0,     5,     0,    15,
     0,    16,     0,    17,     0,    18,    19,     0,     0,   176,
     0,    21,    22,    23,    24,    53,    26,    27,    28,    29,
    30,    31,    32,    33,    34,     0,     0,     1,     2,     3,
     0,     0,     0,    12,    13,     0,     5,     0,     0,     0,
     0,    14,     0,     0,     0,     0,    15,     0,    16,     0,
    17,   248,    18,    19,     0,     0,     0,     0,    21,    22,
    23,    24,    53,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    12,    13,     0,     0,     0,     0,     0,     0,
    14,     0,     0,     0,     0,    15,   131,    16,     0,    17,
     0,    18,    19,     0,     0,     0,     0,    21,    22,    23,
    24,    53,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    87,     0,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   210,     0,     0,   106,   107,     0,     0,     0,     0,
     0,     0,   108,     0,     0,     0,     0,   132,     0,     0,
     0,     0,     0,    87,     0,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   260,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    87,     0,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,    87,   108,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,     0,   108,     0,     0,     0,
    87,   250,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     0,     0,     0,   106,   107,     0,     0,     0,     0,     0,
     0,   108,     0,     0,     0,    87,   252,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,     0,     0,     0,   106,   107,
     0,     0,     0,     0,     0,     0,   108,     0,     0,     0,
    87,   276,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     0,     0,     0,   106,   107,     0,     0,     0,     0,     0,
     0,   108,   255,    87,     0,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,   108,   267,    87,     0,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,     0,     0,     0,   106,
   107,     0,     0,     0,     0,     0,     0,   108,   270,    87,
     0,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,     0,
     0,     0,   106,   107,     0,     0,     0,   134,     0,    87,
   108,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,     0,
     0,     0,   106,   107,     0,   140,     0,     0,     0,     0,
   108,    87,   216,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,    87,   108,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,     0,     0,     0,   106,   107,     0,   217,     0,     0,
     0,    87,   108,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,     0,     0,     0,   106,   107,     0,     0,     0,     0,
     0,   229,   108,    87,     0,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,     0,     0,     0,   106,   107,     0,   233,
     0,     0,     0,    87,   108,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,     0,     0,     0,   106,   107,     0,     0,
     0,     0,     0,     0,   108,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,     0,     0,     0,   106,   107,     0,     0,     0,
     0,     0,     0,   108,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,     0,     0,     0,
   106,   107,     0,     0,     0,     0,     0,     0,   108,
    }, yyCheck = {
//yyCheck 3789
    50,     0,     0,   278,     0,    17,     4,    19,     6,    51,
   278,     9,    10,   278,    12,    13,    14,    15,   278,    17,
    18,    19,   261,   278,   318,   264,   265,   317,   267,   323,
   235,   270,   237,    56,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,   324,
   263,     0,   311,   312,   289,   317,   324,   315,   271,   324,
   319,   317,    85,   320,   324,     0,   323,   272,   316,   324,
   311,   312,   320,   315,   314,   323,     7,     8,   319,   318,
   315,   331,   320,    81,    82,    16,    84,   323,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   131,   323,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   316,
    51,    52,   320,   320,   316,   262,   323,   320,   320,     0,
   128,   327,   328,   329,   323,   331,   320,   135,   318,   323,
   138,   139,   140,   319,   142,   261,   144,   318,   264,   265,
   192,   288,    83,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   213,   323,   316,   311,   312,   107,   227,   176,   314,
   320,   316,   319,   323,   273,   208,   316,   210,   186,   212,
   188,   289,   315,     0,   299,   300,   301,   302,   303,   304,
   305,   306,   307,   332,   202,   136,   311,   312,   317,   289,
   320,   209,   266,   262,   319,   273,   319,   316,   216,   217,
   218,   318,   234,   221,   314,   304,   305,   306,   307,   273,
   273,   318,   311,   312,   232,   233,   234,   260,   273,   262,
   319,   264,   302,   303,   304,   305,   306,   307,   320,   320,
   316,   311,   312,   251,   318,   278,   187,     0,   320,   319,
   316,   192,   273,   262,   263,   261,     8,   266,   264,   265,
   316,   267,   271,    52,   270,    10,     4,    57,   214,   278,
   211,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,   218,
   192,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
   319,   320,     0,    -1,   323,   324,   325,   262,   263,   278,
    -1,   266,    -1,    -1,    -1,   261,   271,    -1,   264,   265,
    -1,   267,    -1,   278,   270,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,    -1,    -1,   324,   311,   312,    -1,   314,
    -1,   316,    -1,   318,   319,   320,     0,    -1,   323,   324,
   325,   262,   263,   261,    -1,   266,   264,   265,    -1,   267,
   271,    -1,   270,    -1,    -1,   273,    -1,   278,    -1,   280,
   281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     0,    -1,   323,   324,   325,   262,   263,   261,    -1,   266,
   264,   265,    -1,   267,   271,    -1,   270,    -1,    -1,   273,
    -1,   278,    -1,   280,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,    -1,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
    -1,   318,   319,   320,     0,    -1,   323,   324,   325,   262,
   263,   261,    -1,   266,   264,   265,    -1,   267,   271,     0,
   270,    -1,    -1,    -1,    -1,   278,    -1,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,    -1,    -1,    -1,   311,   312,
    -1,   314,    -1,   316,    -1,   318,   319,   320,     0,    -1,
   323,   324,   325,    -1,   262,   263,    -1,    -1,   266,    -1,
    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
   278,    -1,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    -1,    -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,
   318,   319,   320,     0,    -1,   323,   324,   325,   262,   263,
    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,   278,    -1,   280,   281,   282,   283,
   284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,    -1,    -1,    -1,   311,   312,    -1,
   314,    -1,   316,    -1,   318,   319,   320,     0,    -1,   323,
   324,   325,   262,   263,    -1,    -1,   266,    -1,    -1,    -1,
    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
   300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
   320,     0,    -1,   323,   324,   325,   262,   263,    -1,    -1,
   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,
   261,    -1,   278,   264,   265,    -1,   267,    -1,    -1,   270,
    -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,    -1,    -1,    -1,   311,   312,    -1,   314,    -1,
   316,    -1,   318,    -1,   320,     0,    -1,   323,   324,   325,
   262,   263,    -1,    -1,   266,    -1,    -1,   318,   261,   271,
   263,   264,   265,    -1,   267,    -1,   278,   270,   271,    -1,
   273,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
    -1,    -1,   314,    -1,   316,    -1,   318,    -1,   320,     0,
    -1,   323,   324,   325,    -1,   262,   263,    -1,    -1,   266,
    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
    -1,   278,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,   316,
    -1,   318,    -1,   320,     0,    -1,   323,   324,   325,   262,
   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,   278,   280,   281,   282,   283,
   284,   285,   286,   287,    -1,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,    -1,
    -1,   314,    -1,   316,    -1,   318,    -1,   320,     0,    -1,
   323,   324,   325,   262,   263,    -1,    -1,   266,    -1,    -1,
    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,   278,
   280,   281,   282,   283,   284,   285,   286,   287,    -1,   288,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
    -1,    -1,    -1,    -1,    -1,   314,    -1,   316,    -1,   318,
    -1,   320,     0,    -1,   323,   324,   325,   262,   263,    -1,
    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,    -1,    -1,    -1,    -1,    -1,    -1,   314,
    -1,   316,    -1,   318,    -1,   320,     0,    -1,   323,   324,
   325,   262,   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,
   271,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
    -1,    -1,    -1,   314,    -1,   316,    -1,   318,    -1,   320,
     0,    -1,   323,   324,   325,    -1,   262,   263,    -1,    -1,
   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,
    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,
   316,    -1,   318,    -1,   320,     0,    -1,   323,   324,   325,
   262,   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,
    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
   302,   303,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   314,    -1,   316,    -1,   318,    -1,   320,     0,
    -1,   323,   324,   325,   262,   263,    -1,    -1,   266,    -1,
    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,    -1,    -1,    -1,    -1,
    46,    -1,    -1,    -1,    -1,    -1,   314,    -1,   316,    -1,
   318,    -1,   320,     0,    -1,   323,   324,   325,   262,   263,
    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,
    -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   314,    -1,   316,    -1,   318,    -1,   320,     0,    -1,   323,
   324,   325,   262,   263,   130,    -1,   266,    -1,    -1,    -1,
    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,
    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,    -1,
    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   314,    -1,   316,    -1,   318,    -1,
   320,    -1,    -1,   323,   324,   325,    -1,   262,   263,    -1,
   196,   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,
     0,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,    -1,    -1,    -1,    -1,    -1,   235,
    -1,   237,    -1,   239,    -1,    -1,    -1,    -1,    -1,   314,
    -1,   316,    -1,   318,     0,   320,    -1,    -1,   323,   324,
   325,   262,   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,
   271,    -1,    -1,    -1,    -1,    -1,   272,   278,   274,   275,
    -1,    -1,    -1,    -1,    -1,   281,    -1,   288,   289,   290,
   291,   292,   293,   294,   295,   296,   297,   298,     0,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   314,    -1,   316,    -1,   318,    -1,   320,
    -1,    -1,   323,   324,   325,   262,   263,    -1,    -1,   266,
    -1,    -1,    -1,    -1,   271,    -1,    -1,     0,    -1,    -1,
    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,   316,
    -1,   318,    -1,   320,    -1,    -1,   323,   324,   325,   262,
   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,
    -1,    -1,    -1,    -1,     0,   278,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,    -1,    -1,    -1,    -1,
    -1,    -1,     0,   262,   263,    -1,    -1,   266,    -1,    -1,
    -1,   314,   271,   316,    -1,   318,    -1,   320,    -1,   278,
   323,   324,   325,    -1,    -1,    -1,    -1,    -1,    -1,   288,
   289,   290,   291,   292,   293,   294,    -1,    -1,    -1,     0,
    -1,    -1,   262,   263,    -1,    -1,   266,    -1,    -1,    -1,
    -1,   271,    -1,    -1,    -1,   314,    -1,   316,   278,   318,
    -1,   320,    -1,    -1,   323,   324,   325,     0,   288,   289,
   290,   291,   292,   293,   294,    -1,    -1,    -1,    -1,    -1,
     0,    -1,    -1,    -1,    -1,    -1,   262,   263,    -1,    -1,
   266,    -1,    -1,    -1,   314,   271,   316,    -1,   318,    -1,
   320,    -1,   278,   323,   324,   325,    -1,    -1,     0,    -1,
    -1,    -1,   288,   289,   290,   291,   292,   301,   302,   303,
   304,   305,   306,   307,    -1,    -1,    -1,   311,   312,    -1,
   262,   263,    -1,    -1,   266,   319,    -1,    -1,   314,   271,
   316,    -1,   318,    -1,   320,     0,   278,   323,   324,   325,
    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
   263,    -1,    -1,   266,    -1,     0,    -1,    -1,   271,    -1,
    -1,    -1,   314,    -1,   316,   278,   318,    -1,   320,    -1,
    -1,   323,   324,   325,    -1,   288,   289,   290,    -1,   262,
   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,
    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,
    -1,   314,    -1,   316,     0,   318,   289,   320,    -1,    -1,
   323,   324,   325,    -1,    -1,    -1,   262,   263,    -1,    -1,
   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,
    -1,   314,   278,   316,    -1,   318,    -1,   320,    -1,    -1,
   323,   324,   325,   289,   262,   263,    -1,    -1,   266,    -1,
    -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,
   316,   289,   318,    -1,   320,    -1,    -1,   323,   324,   325,
    -1,   262,   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,
   271,    -1,    -1,    -1,    -1,    -1,   314,   278,   316,    -1,
   318,    -1,   320,    -1,    -1,   323,   324,   325,   289,   262,
   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,
    -1,    -1,   262,   263,    -1,   278,   266,    -1,    -1,    -1,
    -1,   271,    -1,   314,    -1,   316,   289,   318,   278,   320,
    -1,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   289,
   262,   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,   271,
    -1,   314,    -1,   316,    -1,   318,   278,   320,    -1,    -1,
   323,   324,   325,    -1,   314,    -1,   316,   289,   318,    -1,
   320,    -1,    -1,   323,   324,   325,    -1,   262,   263,    -1,
    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,
    -1,    -1,   314,   278,   316,    -1,   318,    -1,   320,    -1,
    -1,   323,   324,   325,   289,    -1,    -1,   262,   263,    -1,
    -1,   266,    -1,    -1,    -1,    -1,   271,    -1,    -1,    -1,
    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,   314,
    -1,   316,    -1,   318,   289,   320,    -1,    -1,   323,   324,
   325,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,
    -1,   316,    -1,   318,    -1,   320,    -1,    -1,   323,   324,
   325,    -1,   278,    -1,   280,   281,   282,   283,   284,   285,
   286,   287,   288,    -1,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,    -1,    -1,    -1,   311,   312,    -1,   257,   258,
   259,   260,    -1,   319,    -1,   271,    -1,   266,   324,   268,
   269,    -1,    -1,   272,    -1,   274,   275,   276,   277,    -1,
   279,    -1,   288,    -1,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,    -1,   302,   303,   311,   312,    -1,    -1,    -1,
    -1,   310,    -1,   319,    -1,    -1,   315,    -1,   317,    -1,
   319,    -1,   321,   322,    -1,   324,    -1,    -1,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   257,   258,   259,   260,    -1,    -1,    -1,    -1,
    -1,   266,    -1,    -1,   269,    -1,    -1,   272,   273,   274,
   275,   276,   277,    -1,   279,    -1,   288,    -1,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   307,    -1,   302,   303,   311,
   312,    -1,    -1,    -1,    -1,   310,    -1,   319,   320,    -1,
   315,    -1,   317,   325,   319,    -1,   321,   322,    -1,   324,
    -1,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   257,   258,   259,   260,
    -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,
    -1,   272,    -1,   274,   275,   276,   277,    -1,   279,    -1,
   288,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    -1,   302,   303,   311,   312,    -1,    -1,    -1,    -1,   310,
    -1,   319,    -1,    -1,   315,   323,   317,   318,   319,    -1,
   321,   322,    -1,   324,    -1,    -1,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   257,   258,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
    -1,    -1,    -1,    -1,    -1,   272,    -1,   274,   275,   276,
   277,    -1,   279,    -1,   288,    -1,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,    -1,   302,   303,   311,   312,    -1,
    -1,    -1,    -1,   310,    -1,   319,   320,    -1,   315,    -1,
   317,   318,   319,    -1,   321,   322,    -1,   324,    -1,    -1,
   327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   257,   258,   259,   260,    -1,    -1,
   263,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,   272,
    -1,   274,   275,   276,   277,    -1,   279,    -1,   288,    -1,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
   300,   301,   302,   303,   304,   305,   306,   307,    -1,   302,
   303,   311,   312,    -1,    -1,    -1,    -1,   310,    -1,   319,
    -1,    -1,   315,    -1,   317,   325,   319,    -1,   321,   322,
    -1,   324,    -1,    -1,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   257,   258,
   259,   260,    -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,
    -1,    -1,    -1,   272,   273,   274,   275,   276,   277,    -1,
   279,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,   302,   303,    -1,   311,   312,    -1,    -1,
    -1,   310,    -1,    -1,   319,   320,   315,    -1,   317,   324,
   319,    -1,   321,   322,    -1,   324,    -1,    -1,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   257,   258,   259,   260,    -1,    -1,    -1,    -1,
    -1,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,   274,
   275,   276,   277,    -1,   279,    -1,    -1,   288,    -1,   290,
   291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   307,   302,   303,    -1,
   311,   312,    -1,    -1,    -1,   310,    -1,    -1,   319,    -1,
   315,    -1,   317,   324,   319,    -1,   321,   322,    -1,   324,
    -1,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   257,   258,   259,   260,
    -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,
    -1,   272,    -1,   274,   275,   276,   277,    -1,   279,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,   257,   258,   259,   311,   312,
    -1,   302,   303,    -1,   266,    -1,   319,    -1,    -1,   310,
    -1,    -1,    -1,    -1,   315,    -1,   317,    -1,   319,    -1,
   321,   322,    -1,   324,    -1,    -1,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   302,   303,   257,   258,   259,    -1,    -1,    -1,   310,    -1,
    -1,   266,    -1,   315,    -1,   317,    -1,   319,   320,   321,
   322,    -1,   324,   278,    -1,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
    -1,   257,   258,   259,    -1,    -1,    -1,   302,   303,    -1,
   266,    -1,    -1,    -1,    -1,   310,    -1,    -1,    -1,    -1,
   315,    -1,   317,    -1,   319,    -1,   321,   322,    -1,    -1,
    -1,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   302,   303,   257,   258,
   259,    -1,    -1,    -1,   310,    -1,    -1,   266,    -1,   315,
    -1,   317,    -1,   319,    -1,   321,   322,    -1,    -1,   325,
    -1,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,    -1,    -1,   257,   258,   259,
    -1,    -1,    -1,   302,   303,    -1,   266,    -1,    -1,    -1,
    -1,   310,    -1,    -1,    -1,    -1,   315,    -1,   317,    -1,
   319,   320,   321,   322,    -1,    -1,    -1,    -1,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   302,   303,    -1,    -1,    -1,    -1,    -1,    -1,
   310,    -1,    -1,    -1,    -1,   315,   263,   317,    -1,   319,
    -1,   321,   322,    -1,    -1,    -1,    -1,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   288,    -1,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   266,    -1,    -1,   311,   312,    -1,    -1,    -1,    -1,
    -1,    -1,   319,    -1,    -1,    -1,    -1,   324,    -1,    -1,
    -1,    -1,    -1,   288,    -1,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,   266,    -1,    -1,   311,   312,    -1,    -1,
    -1,    -1,    -1,    -1,   319,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,    -1,    -1,    -1,   311,   312,
    -1,    -1,    -1,    -1,    -1,   288,   319,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,    -1,    -1,    -1,   311,   312,
    -1,    -1,    -1,    -1,    -1,    -1,   319,    -1,    -1,    -1,
   288,   324,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    -1,    -1,    -1,   311,   312,    -1,    -1,    -1,    -1,    -1,
    -1,   319,    -1,    -1,    -1,   288,   324,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,    -1,    -1,    -1,   311,   312,
    -1,    -1,    -1,    -1,    -1,    -1,   319,    -1,    -1,    -1,
   288,   324,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    -1,    -1,    -1,   311,   312,    -1,    -1,    -1,    -1,    -1,
    -1,   319,   320,   288,    -1,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,    -1,    -1,    -1,   311,   312,    -1,    -1,
    -1,    -1,    -1,    -1,   319,   320,   288,    -1,   290,   291,
   292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,   311,
   312,    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   288,
    -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
    -1,    -1,   311,   312,    -1,    -1,    -1,   316,    -1,   288,
   319,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
    -1,    -1,   311,   312,    -1,   314,    -1,    -1,    -1,    -1,
   319,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,    -1,    -1,    -1,   311,   312,    -1,    -1,    -1,    -1,
    -1,   288,   319,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,    -1,    -1,    -1,   311,   312,    -1,   314,    -1,    -1,
    -1,   288,   319,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,    -1,    -1,    -1,   311,   312,    -1,    -1,    -1,    -1,
    -1,   318,   319,   288,    -1,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,    -1,    -1,    -1,   311,   312,    -1,   314,
    -1,    -1,    -1,   288,   319,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
   305,   306,   307,    -1,    -1,    -1,   311,   312,    -1,    -1,
    -1,    -1,    -1,    -1,   319,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,    -1,    -1,    -1,   311,   312,    -1,    -1,    -1,
    -1,    -1,    -1,   319,   295,   296,   297,   298,   299,   300,
   301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
   311,   312,    -1,    -1,    -1,    -1,    -1,    -1,   319,
    };

  /** maps symbol value to printable name.
      @see #yyExpecting
    */
  protected static final String[] yyNames = {
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"OBJECT","RECORD","FUNCTION","DEF",
    "IF","THEN","ELSE","FOR","WHILE","DO","TRY","CATCH","FINALLY",
    "SWITCH","CASE","ASSERT","END","BREAK","CONTINUE","THROW","RETURN",
    "ATMARK","OWATA","NEWSLOT","ASSIGN","ASSIGN_ADD","ASSIGN_SUB",
    "ASSIGN_MUL","ASSIGN_DIV","ASSIGN_MOD","ASSIGN_TRUEDIV","QUESTION",
    "COLON","OR","XOR","AND","EQ","NEQ","LT","LTEQ","GT","GTEQ","RFIND",
    "RREPL","IFNULL","PLUS","MINUS","MUL","DIV","MOD","TRUEDIV","UPLUS",
    "UMINUS","NOT","ISNULL","DOT","RIGHT_DARROW","RIGHT_ARROW","LP","RP",
    "LB","RB","LBT","RBT","MAP_LBT","SET_LBT","COMMA","SEMICOLON","DOT2",
    "COLON2","THIS","SUPER","OUTER","LOCAL","IDENTIFIER","INTEGER",
    "DECIMAL","STRING","CHAR","NULL","VOID","TRUE","FALSE","REGEX",
    };

//t  /** printable rules for debugging.
//t    */
//t  protected static final String [] yyRule = {
//t    "$accept : compilationUnit",
//t    "compilationUnit : expr",
//t    "compilationUnit : stmtListOpt",
//t    "stmtListOpt :",
//t    "stmtListOpt : stmtList",
//t    "stmtList : stmt",
//t    "stmtList : stmtList stmt",
//t    "stmt : SEMICOLON",
//t    "stmt : cmdStmt SEMICOLON",
//t    "stmt : cmdStmt ATMARK IF expr SEMICOLON",
//t    "stmt : cmdStmt ATMARK FOR id COLON expr SEMICOLON",
//t    "stmt : cmdStmt ATMARK WHILE expr SEMICOLON",
//t    "stmt : DEF leftvalue ASSIGN expr SEMICOLON",
//t    "stmt : labelOpt IF expr THEN stmtList elseStmtOpt END",
//t    "stmt : labelOpt FOR id COLON expr DO stmtList elseStmtOpt END",
//t    "stmt : labelOpt WHILE expr DO stmtList elseStmtOpt END",
//t    "stmt : labelOpt TRY stmtList CATCH id DO stmtList END",
//t    "stmt : labelOpt TRY stmtList FINALLY stmtList END",
//t    "stmt : labelOpt TRY stmtList CATCH id DO stmtList FINALLY stmtList END",
//t    "stmt : labelOpt SWITCH expr caseList elseStmtOpt END",
//t    "stmt : ASSERT expr SEMICOLON",
//t    "stmt : ASSERT expr elseStmt END",
//t    "stmt : OWATA",
//t    "labelOpt :",
//t    "labelOpt : IDENTIFIER COLON",
//t    "cmdStmt : expr",
//t    "cmdStmt : RETURN exprOpt",
//t    "cmdStmt : BREAK idOpt",
//t    "cmdStmt : CONTINUE idOpt",
//t    "cmdStmt : THROW exprOpt",
//t    "elseStmtOpt :",
//t    "elseStmtOpt : elseStmt",
//t    "elseStmt : ELSE stmtList",
//t    "caseList : caseBody",
//t    "caseList : caseList caseBody",
//t    "caseBody : CASE primitive THEN stmtList",
//t    "exprListOpt :",
//t    "exprListOpt : exprList",
//t    "exprList : expr",
//t    "exprList : exprList COMMA expr",
//t    "exprOpt :",
//t    "exprOpt : expr",
//t    "expr : term",
//t    "expr : LP expr RP",
//t    "expr : PLUS expr",
//t    "expr : MINUS expr",
//t    "expr : NOT expr",
//t    "expr : expr ISNULL",
//t    "expr : expr MUL expr",
//t    "expr : expr DIV expr",
//t    "expr : expr MOD expr",
//t    "expr : expr TRUEDIV expr",
//t    "expr : expr PLUS expr",
//t    "expr : expr MINUS expr",
//t    "expr : expr IFNULL expr",
//t    "expr : expr RFIND expr",
//t    "expr : expr RREPL expr RIGHT_ARROW expr",
//t    "expr : expr EQ expr",
//t    "expr : expr NEQ expr",
//t    "expr : expr LT expr",
//t    "expr : expr LTEQ expr",
//t    "expr : expr GT expr",
//t    "expr : expr GTEQ expr",
//t    "expr : expr AND expr",
//t    "expr : expr XOR expr",
//t    "expr : expr OR expr",
//t    "expr : expr QUESTION expr COLON expr",
//t    "expr : leftvalue NEWSLOT expr",
//t    "expr : leftvalue ASSIGN expr",
//t    "expr : leftvalue ASSIGN_ADD expr",
//t    "expr : leftvalue ASSIGN_SUB expr",
//t    "expr : leftvalue ASSIGN_MUL expr",
//t    "expr : leftvalue ASSIGN_DIV expr",
//t    "expr : leftvalue ASSIGN_TRUEDIV expr",
//t    "expr : leftvalue ASSIGN_MOD expr",
//t    "expr : expr DOT id",
//t    "expr : expr DOT THIS",
//t    "expr : expr DOT SUPER",
//t    "expr : expr DOT OUTER",
//t    "expr : IDENTIFIER LP callArgs RP",
//t    "expr : expr DOT IDENTIFIER LP callArgs RP",
//t    "expr : expr LBT expr RBT",
//t    "expr : expr LBT expr DOT2 expr RBT",
//t    "expr : expr LBT expr DOT2 RBT",
//t    "expr : expr LBT DOT2 expr RBT",
//t    "callArgs : exprListOpt",
//t    "callArgs : ATMARK expr",
//t    "callArgs : ATMARK expr COMMA exprListOpt",
//t    "leftvalue : id",
//t    "leftvalue : SUPER",
//t    "leftvalue : OUTER",
//t    "leftvalue : expr DOT id",
//t    "leftvalue : expr DOT SUPER",
//t    "leftvalue : expr DOT OUTER",
//t    "leftvalue : expr LBT expr RBT",
//t    "term : id",
//t    "term : THIS",
//t    "term : SUPER",
//t    "term : OUTER",
//t    "term : LOCAL",
//t    "term : primitive",
//t    "term : LBT exprListOpt RBT",
//t    "term : MAP_LBT mapElementOpt RBT",
//t    "term : SET_LBT exprListOpt RBT",
//t    "term : LBT expr DOT2 RBT",
//t    "term : LBT expr DOT2 expr RBT",
//t    "term : LBT expr DOT2 SEMICOLON expr RBT",
//t    "term : LBT expr DOT2 expr SEMICOLON expr RBT",
//t    "term : objectExpr",
//t    "term : functionExpr",
//t    "term : recordExpr",
//t    "term : blockExpr",
//t    "mapElementOpt :",
//t    "mapElementOpt : mapElement",
//t    "mapElement : expr RIGHT_ARROW expr",
//t    "mapElement : mapElement COMMA expr RIGHT_ARROW expr",
//t    "objectExpr : OBJECT LB stmtListOpt RB",
//t    "functionExpr : FUNCTION LP idListOpt RP LB stmtListOpt RB",
//t    "functionExpr : LB idListOpt RIGHT_ARROW expr RB",
//t    "recordExpr : RECORD LB recordElementListOpt RB",
//t    "recordElementListOpt :",
//t    "recordElementListOpt : recordElementList",
//t    "recordElementList : recordElement",
//t    "recordElementList : recordElementList COMMA recordElement",
//t    "recordElement : primitive",
//t    "recordElement : id",
//t    "recordElement : id LBT INTEGER RBT",
//t    "blockExpr : DO LB RB",
//t    "blockExpr : DO LB stmtList RB",
//t    "primitive : VOID",
//t    "primitive : NULL",
//t    "primitive : TRUE",
//t    "primitive : FALSE",
//t    "primitive : INTEGER",
//t    "primitive : DECIMAL",
//t    "primitive : STRING",
//t    "primitive : REGEX",
//t    "primitive : CHAR",
//t    "idListOpt :",
//t    "idListOpt : idList",
//t    "idList : id",
//t    "idList : idList COMMA id",
//t    "idOpt :",
//t    "idOpt : id",
//t    "id : IDENTIFIER",
//t    };
//t
//t  /** debugging support, requires the package <tt>jay.yydebug</tt>.
//t      Set to <tt>null</tt> to suppress debugging messages.
//t    */
//t  protected jay.yydebug.yyDebug yydebug;
//t
//t  /** index-checked interface to {@link #yyNames}.
//t      @param token single character or <tt>%token</tt> value.
//t      @return token name or <tt>[illegal]</tt> or <tt>[unknown]</tt>.
//t    */
//t  public static final String yyName (int token) {
//t    if (token < 0 || token > yyNames.length) return "[illegal]";
//t    String name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }
//t
  /** thrown for irrecoverable syntax errors and stack overflow.
      Nested for convenience, does not depend on parser class.
    */
  public static class yyException extends java.lang.Exception {
    public yyException (String message) {
      super(message);
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
      Nested for convenience, does not depend on parser class.
    */
  public interface yyInput {

    /** move on to next token.
        @return <tt>false</tt> if positioned beyond tokens.
        @throws IOException on input error.
      */
    boolean advance () throws java.io.IOException;

    /** classifies current token.
        Should not be called if {@link #advance()} returned <tt>false</tt>.
        @return current <tt>%token</tt> or single character.
      */
    int token ();

    /** associated with current token.
        Should not be called if {@link #advance()} returned <tt>false</tt>.
        @return value for {@link #token()}.
      */
    Object value ();
  }

  /** simplified error message.
      @see #yyerror(java.lang.String, java.lang.String[])
    */
  public void yyerror (String message) {
    yyerror(message, null);
  }

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected list of acceptable tokens, if available.
    */
  public void yyerror (String message, String[] expected) {
    if (expected != null && expected.length > 0) {
      System.err.print(message+", expecting");
      for (int n = 0; n < expected.length; ++ n)
        System.err.print(" "+expected[n]);
      System.err.println();
    } else
      System.err.println(message);
  }

  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected String[] yyExpecting (int state) {
    int token, n, len = 0;
    boolean[] ok = new boolean[yyNames.length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    String result[] = new String[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @param yydebug debug message writer implementing <tt>yyDebug</tt>, or <tt>null</tt>.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  public Object yyparse (yyInput yyLex, Object yydebug)
				throws java.io.IOException, yyException {
//t    this.yydebug = (jay.yydebug.yyDebug)yydebug;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of {@link #yyparse}.
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as <tt>$$ = yyDefault($1)</tt>, prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for <tt>$1</tt>, or <tt>null</tt>.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  public Object yyparse (yyInput yyLex) throws java.io.IOException, yyException {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0, yyStates[] = new int[yyMax];	// state stack
    Object yyVal = null, yyVals[] = new Object[yyMax];	// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tokens to shift

    yyLoop: for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.length) {			// dynamically increase
        int[] i = new int[yyStates.length+yyMax];
        System.arraycopy(yyStates, 0, i, 0, yyStates.length);
        yyStates = i;
        Object[] o = new Object[yyVals.length+yyMax];
        System.arraycopy(yyVals, 0, o, 0, yyVals.length);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (yydebug != null) yydebug.push(yyState, yyVal);

      yyDiscarded: for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (yydebug != null)
//t              yydebug.lex(yyState, yyToken, yyName(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken) {
//t            if (yydebug != null)
//t              yydebug.shift(yyState, yyTable[yyN], yyErrorFlag > 0 ? yyErrorFlag-1 : 0);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            continue yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyerror("syntax error", yyExpecting(yyState));
//t              if (yydebug != null) yydebug.error("syntax error");
  
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += yyErrorCode) >= 0 && yyN < yyTable.length
                    && yyCheck[yyN] == yyErrorCode) {
//t                  if (yydebug != null)
//t                    yydebug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  continue yyLoop;
                }
//t                if (yydebug != null) yydebug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (yydebug != null) yydebug.reject();
              throw new yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (yydebug != null) yydebug.reject();
                throw new yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (yydebug != null)
//t                yydebug.discard(yyState, yyToken, yyName(yyToken), yyLex.value());
              yyToken = -1;
              continue yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (yydebug != null)
//t          yydebug.reduce(yyState, yyStates[yyV-1], yyN, yyRule[yyN], yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
					// line 93 "src/anubis/parser/anubis.jay"
  { yyVal = new ReturnStatement(((Expression)yyVals[0+yyTop])); }
  break;
case 2:
					// line 95 "src/anubis/parser/anubis.jay"
  { yyVal = ((Statement)yyVals[0+yyTop]); }
  break;
case 3:
					// line 100 "src/anubis/parser/anubis.jay"
  { yyVal = EmptyStatement.INSTANCE; }
  break;
case 4:
					// line 102 "src/anubis/parser/anubis.jay"
  { yyVal = ((Statement)yyVals[0+yyTop]); }
  break;
case 5:
					// line 106 "src/anubis/parser/anubis.jay"
  { yyVal = new BlockStatement().append(((Statement)yyVals[0+yyTop])); }
  break;
case 6:
					// line 108 "src/anubis/parser/anubis.jay"
  { yyVal = ((BlockStatement)((Statement)yyVals[-1+yyTop])).append(((Statement)yyVals[0+yyTop])); }
  break;
case 7:
					// line 112 "src/anubis/parser/anubis.jay"
  { yyVal = EmptyStatement.INSTANCE; }
  break;
case 8:
					// line 114 "src/anubis/parser/anubis.jay"
  { yyVal = ((Statement)yyVals[-1+yyTop]); }
  break;
case 9:
					// line 116 "src/anubis/parser/anubis.jay"
  { yyVal = new ConditionStatement(((Expression)yyVals[-1+yyTop]), ((Statement)yyVals[-4+yyTop]), EmptyStatement.INSTANCE); }
  break;
case 10:
					// line 118 "src/anubis/parser/anubis.jay"
  { yyVal = new ForStatement(((String)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop]), ((Statement)yyVals[-6+yyTop]), EmptyStatement.INSTANCE); }
  break;
case 11:
					// line 120 "src/anubis/parser/anubis.jay"
  { yyVal = new WhileStatement(((Expression)yyVals[-1+yyTop]), ((Statement)yyVals[-4+yyTop]), EmptyStatement.INSTANCE); }
  break;
case 12:
					// line 122 "src/anubis/parser/anubis.jay"
  { yyVal = new ExpressionStatement(newNewSlotCall(((LeftValue)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop]), true)); }
  break;
case 13:
					// line 124 "src/anubis/parser/anubis.jay"
  { yyVal = new ConditionStatement(((String)yyVals[-6+yyTop]), ((Expression)yyVals[-4+yyTop]), ((Statement)yyVals[-2+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 14:
					// line 126 "src/anubis/parser/anubis.jay"
  { yyVal = new ForStatement(((String)yyVals[-8+yyTop]), ((String)yyVals[-6+yyTop]), ((Expression)yyVals[-4+yyTop]), ((Statement)yyVals[-2+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 15:
					// line 128 "src/anubis/parser/anubis.jay"
  { yyVal = new WhileStatement(((String)yyVals[-6+yyTop]), ((Expression)yyVals[-4+yyTop]), ((Statement)yyVals[-2+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 16:
					// line 130 "src/anubis/parser/anubis.jay"
  { yyVal = new TryCatchStatement(((String)yyVals[-7+yyTop]), ((Statement)yyVals[-5+yyTop]), ((String)yyVals[-3+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 17:
					// line 132 "src/anubis/parser/anubis.jay"
  { yyVal = new TryFinallyStatement(((String)yyVals[-5+yyTop]), ((Statement)yyVals[-3+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 18:
					// line 134 "src/anubis/parser/anubis.jay"
  { yyVal = new TryFinallyStatement(((String)yyVals[-9+yyTop]), new TryCatchStatement(((Statement)yyVals[-7+yyTop]), ((String)yyVals[-5+yyTop]), ((Statement)yyVals[-3+yyTop])), ((Statement)yyVals[-1+yyTop])); }
  break;
case 19:
					// line 136 "src/anubis/parser/anubis.jay"
  { yyVal = new SwitchStatement(((String)yyVals[-5+yyTop]), ((Expression)yyVals[-3+yyTop]), ((List<CaseElement>)yyVals[-2+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 20:
					// line 138 "src/anubis/parser/anubis.jay"
  { yyVal = new AssertStatement(((Expression)yyVals[-1+yyTop])); }
  break;
case 21:
					// line 140 "src/anubis/parser/anubis.jay"
  { yyVal = new AssertStatement(((Expression)yyVals[-2+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 22:
					// line 142 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 23:
					// line 145 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 24:
					// line 147 "src/anubis/parser/anubis.jay"
  { yyVal = ((String)yyVals[-1+yyTop]); }
  break;
case 25:
					// line 151 "src/anubis/parser/anubis.jay"
  { yyVal = new ExpressionStatement(((Expression)yyVals[0+yyTop])); }
  break;
case 26:
					// line 153 "src/anubis/parser/anubis.jay"
  { yyVal = new ReturnStatement(((Expression)yyVals[0+yyTop])); }
  break;
case 27:
					// line 155 "src/anubis/parser/anubis.jay"
  { yyVal = new BreakStatement(((String)yyVals[0+yyTop])); }
  break;
case 28:
					// line 157 "src/anubis/parser/anubis.jay"
  { yyVal = new ContinueStatement(((String)yyVals[0+yyTop])); }
  break;
case 29:
					// line 159 "src/anubis/parser/anubis.jay"
  { yyVal = new ThrowStatement(((Expression)yyVals[0+yyTop])); }
  break;
case 30:
					// line 162 "src/anubis/parser/anubis.jay"
  { yyVal = EmptyStatement.INSTANCE; }
  break;
case 31:
					// line 164 "src/anubis/parser/anubis.jay"
  { yyVal = ((Statement)yyVals[0+yyTop]); }
  break;
case 32:
					// line 168 "src/anubis/parser/anubis.jay"
  { yyVal = ((Statement)yyVals[0+yyTop]); }
  break;
case 33:
					// line 172 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<CaseElement>(Arrays.asList(((CaseElement)yyVals[0+yyTop]))); }
  break;
case 34:
					// line 174 "src/anubis/parser/anubis.jay"
  { ((List<CaseElement>)yyVals[-1+yyTop]).add(((CaseElement)yyVals[0+yyTop])); yyVal = ((List<CaseElement>)yyVals[-1+yyTop]); }
  break;
case 35:
					// line 178 "src/anubis/parser/anubis.jay"
  { yyVal = new CaseElement(((APrimitive)yyVals[-2+yyTop]), ((Statement)yyVals[0+yyTop])); }
  break;
case 36:
					// line 183 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<Expression>(); }
  break;
case 37:
					// line 185 "src/anubis/parser/anubis.jay"
  { yyVal = ((List<Expression>)yyVals[0+yyTop]); }
  break;
case 38:
					// line 189 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<Expression>(Arrays.asList(((Expression)yyVals[0+yyTop]))); }
  break;
case 39:
					// line 191 "src/anubis/parser/anubis.jay"
  { yyVal = ((List<Expression>)yyVals[-2+yyTop]); ((List<Expression>)yyVals[-2+yyTop]).add(((Expression)yyVals[0+yyTop])); }
  break;
case 40:
					// line 194 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 41:
					// line 196 "src/anubis/parser/anubis.jay"
  { yyVal = ((Expression)yyVals[0+yyTop]); }
  break;
case 42:
					// line 201 "src/anubis/parser/anubis.jay"
  { yyVal = ((Expression)yyVals[0+yyTop]); }
  break;
case 43:
					// line 204 "src/anubis/parser/anubis.jay"
  { yyVal = ((Expression)yyVals[-1+yyTop]); }
  break;
case 44:
					// line 207 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[0+yyTop]), "+p"); }
  break;
case 45:
					// line 209 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[0+yyTop]), "-n"); }
  break;
case 46:
					// line 211 "src/anubis/parser/anubis.jay"
  { yyVal = new UnaryExpression(UnaryOperator.NOT, ((Expression)yyVals[0+yyTop])); }
  break;
case 47:
					// line 213 "src/anubis/parser/anubis.jay"
  { yyVal = new UnaryExpression(UnaryOperator.ISNULL, ((Expression)yyVals[-1+yyTop])); }
  break;
case 48:
					// line 216 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "*", ((Expression)yyVals[0+yyTop])); }
  break;
case 49:
					// line 218 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "/", ((Expression)yyVals[0+yyTop])); }
  break;
case 50:
					// line 220 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "%", ((Expression)yyVals[0+yyTop])); }
  break;
case 51:
					// line 222 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "\\", ((Expression)yyVals[0+yyTop])); }
  break;
case 52:
					// line 224 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "+", ((Expression)yyVals[0+yyTop])); }
  break;
case 53:
					// line 226 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "-", ((Expression)yyVals[0+yyTop])); }
  break;
case 54:
					// line 228 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.IFNULL, ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 55:
					// line 230 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "=~", ((Expression)yyVals[0+yyTop])); }
  break;
case 56:
					// line 232 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-4+yyTop]), "=^", ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 57:
					// line 234 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.EQUALS, ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 58:
					// line 236 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.NOTEQUALS, ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 59:
					// line 238 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "<", ((Expression)yyVals[0+yyTop])); }
  break;
case 60:
					// line 240 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), "<=", ((Expression)yyVals[0+yyTop])); }
  break;
case 61:
					// line 242 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), ">", ((Expression)yyVals[0+yyTop])); }
  break;
case 62:
					// line 244 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-2+yyTop]), ">=", ((Expression)yyVals[0+yyTop])); }
  break;
case 63:
					// line 246 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.AND, ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 64:
					// line 248 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.XOR, ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 65:
					// line 250 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.OR, ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 66:
					// line 253 "src/anubis/parser/anubis.jay"
  { yyVal = new TernaryExpression(TernaryOperator.IFELSE, ((Expression)yyVals[-4+yyTop]), ((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])); }
  break;
case 67:
					// line 256 "src/anubis/parser/anubis.jay"
  { yyVal = newNewSlotCall(((LeftValue)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop]), false); }
  break;
case 68:
					// line 258 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), null, ((Expression)yyVals[0+yyTop])); }
  break;
case 69:
					// line 260 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), "+", ((Expression)yyVals[0+yyTop])); }
  break;
case 70:
					// line 262 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), "-", ((Expression)yyVals[0+yyTop])); }
  break;
case 71:
					// line 264 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), "*", ((Expression)yyVals[0+yyTop])); }
  break;
case 72:
					// line 266 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), "/", ((Expression)yyVals[0+yyTop])); }
  break;
case 73:
					// line 268 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), "\\", ((Expression)yyVals[0+yyTop])); }
  break;
case 74:
					// line 270 "src/anubis/parser/anubis.jay"
  { yyVal = newAssignCall(((LeftValue)yyVals[-2+yyTop]), "%", ((Expression)yyVals[0+yyTop])); }
  break;
case 75:
					// line 273 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSlotExpression(((Expression)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])); }
  break;
case 76:
					// line 275 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSpecialExpression(((Expression)yyVals[-2+yyTop]), SpecialSlot.THIS); }
  break;
case 77:
					// line 277 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSpecialExpression(((Expression)yyVals[-2+yyTop]), SpecialSlot.SUPER); }
  break;
case 78:
					// line 279 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSpecialExpression(((Expression)yyVals[-2+yyTop]), SpecialSlot.OUTER); }
  break;
case 79:
					// line 282 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(LocalExpression.INSTANCE, ((String)yyVals[-3+yyTop]), ((CallArgument)yyVals[-1+yyTop])); }
  break;
case 80:
					// line 284 "src/anubis/parser/anubis.jay"
  { yyVal = newCall(((Expression)yyVals[-5+yyTop]), ((String)yyVals[-3+yyTop]), ((CallArgument)yyVals[-1+yyTop])); }
  break;
case 81:
					// line 287 "src/anubis/parser/anubis.jay"
  { yyVal = new BinaryExpression(BinaryOperator.INDEX, ((Expression)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop])); }
  break;
case 82:
					// line 290 "src/anubis/parser/anubis.jay"
  { yyVal = new TernaryExpression(TernaryOperator.SLICE, ((Expression)yyVals[-5+yyTop]), ((Expression)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop])); }
  break;
case 83:
					// line 292 "src/anubis/parser/anubis.jay"
  { yyVal = new TernaryExpression(TernaryOperator.SLICE, ((Expression)yyVals[-4+yyTop]), ((Expression)yyVals[-2+yyTop]), new PrimitiveExpression(null)); }
  break;
case 84:
					// line 294 "src/anubis/parser/anubis.jay"
  { yyVal = new TernaryExpression(TernaryOperator.SLICE, ((Expression)yyVals[-4+yyTop]), new PrimitiveExpression(null), ((Expression)yyVals[-1+yyTop])); }
  break;
case 85:
					// line 298 "src/anubis/parser/anubis.jay"
  { yyVal = new CallArgument(null, ((List<Expression>)yyVals[0+yyTop])); }
  break;
case 86:
					// line 300 "src/anubis/parser/anubis.jay"
  { yyVal = new CallArgument(((Expression)yyVals[0+yyTop])); }
  break;
case 87:
					// line 302 "src/anubis/parser/anubis.jay"
  { yyVal = new CallArgument(((Expression)yyVals[-2+yyTop]), ((List<Expression>)yyVals[0+yyTop])); }
  break;
case 88:
					// line 307 "src/anubis/parser/anubis.jay"
  { yyVal = new SetSlotLeftValue(LocalExpression.INSTANCE, ((String)yyVals[0+yyTop])); }
  break;
case 89:
					// line 309 "src/anubis/parser/anubis.jay"
  { yyVal = new SetSpecialLeftValue(LocalExpression.INSTANCE, SpecialSlot.SUPER); }
  break;
case 90:
					// line 311 "src/anubis/parser/anubis.jay"
  { yyVal = new SetSpecialLeftValue(LocalExpression.INSTANCE, SpecialSlot.OUTER); }
  break;
case 91:
					// line 314 "src/anubis/parser/anubis.jay"
  { yyVal = new SetSlotLeftValue(((Expression)yyVals[-2+yyTop]), ((String)yyVals[0+yyTop])); }
  break;
case 92:
					// line 316 "src/anubis/parser/anubis.jay"
  { yyVal = new SetSpecialLeftValue(((Expression)yyVals[-2+yyTop]), SpecialSlot.SUPER); }
  break;
case 93:
					// line 318 "src/anubis/parser/anubis.jay"
  { yyVal = new SetSpecialLeftValue(((Expression)yyVals[-2+yyTop]), SpecialSlot.OUTER); }
  break;
case 94:
					// line 321 "src/anubis/parser/anubis.jay"
  { yyVal = new SetIndexLeftValue(((Expression)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop])); }
  break;
case 95:
					// line 327 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSlotExpression(LocalExpression.INSTANCE, ((String)yyVals[0+yyTop])); }
  break;
case 96:
					// line 329 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSpecialExpression(LocalExpression.INSTANCE, SpecialSlot.THIS); }
  break;
case 97:
					// line 331 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSpecialExpression(LocalExpression.INSTANCE, SpecialSlot.SUPER); }
  break;
case 98:
					// line 333 "src/anubis/parser/anubis.jay"
  { yyVal = new GetSpecialExpression(LocalExpression.INSTANCE, SpecialSlot.OUTER); }
  break;
case 99:
					// line 335 "src/anubis/parser/anubis.jay"
  { yyVal = LocalExpression.INSTANCE; }
  break;
case 100:
					// line 338 "src/anubis/parser/anubis.jay"
  { yyVal = new PrimitiveExpression(((APrimitive)yyVals[0+yyTop])); }
  break;
case 101:
					// line 341 "src/anubis/parser/anubis.jay"
  { yyVal = new NewListExpression(((List<Expression>)yyVals[-1+yyTop])); }
  break;
case 102:
					// line 343 "src/anubis/parser/anubis.jay"
  { yyVal = new NewMapExpression(((List<Pair<Expression, Expression>>)yyVals[-1+yyTop])); }
  break;
case 103:
					// line 345 "src/anubis/parser/anubis.jay"
  { yyVal = new NewSetExpression(((List<Expression>)yyVals[-1+yyTop])); }
  break;
case 104:
					// line 348 "src/anubis/parser/anubis.jay"
  { yyVal = new NewRangeExpression(((Expression)yyVals[-2+yyTop]), null, null); }
  break;
case 105:
					// line 350 "src/anubis/parser/anubis.jay"
  { yyVal = new NewRangeExpression(((Expression)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop]), null); }
  break;
case 106:
					// line 352 "src/anubis/parser/anubis.jay"
  { yyVal = new NewRangeExpression(((Expression)yyVals[-4+yyTop]), null, ((Expression)yyVals[-1+yyTop])); }
  break;
case 107:
					// line 354 "src/anubis/parser/anubis.jay"
  { yyVal = new NewRangeExpression(((Expression)yyVals[-5+yyTop]), ((Expression)yyVals[-3+yyTop]), ((Expression)yyVals[-1+yyTop])); }
  break;
case 108:
					// line 357 "src/anubis/parser/anubis.jay"
  { yyVal = ((Expression)yyVals[0+yyTop]); }
  break;
case 109:
					// line 359 "src/anubis/parser/anubis.jay"
  { yyVal = ((Expression)yyVals[0+yyTop]); }
  break;
case 110:
					// line 361 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 111:
					// line 363 "src/anubis/parser/anubis.jay"
  { yyVal = ((Expression)yyVals[0+yyTop]); }
  break;
case 112:
					// line 366 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<Pair<Expression, Expression>>(); }
  break;
case 113:
					// line 368 "src/anubis/parser/anubis.jay"
  { yyVal = ((List<Pair<Expression, Expression>>)yyVals[0+yyTop]); }
  break;
case 114:
					// line 372 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<Pair<Expression, Expression>>(Arrays.asList(new Pair<Expression, Expression>(((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop])))); }
  break;
case 115:
					// line 374 "src/anubis/parser/anubis.jay"
  { yyVal = ((List<Pair<Expression, Expression>>)yyVals[-4+yyTop]); ((List<Pair<Expression, Expression>>)yyVals[-4+yyTop]).add(new Pair<Expression, Expression>(((Expression)yyVals[-2+yyTop]), ((Expression)yyVals[0+yyTop]))); }
  break;
case 116:
					// line 380 "src/anubis/parser/anubis.jay"
  { yyVal = new NewObjectExpression(((Statement)yyVals[-1+yyTop])); }
  break;
case 117:
					// line 384 "src/anubis/parser/anubis.jay"
  { yyVal = new NewFunctionExpression(((List<String>)yyVals[-4+yyTop]), ((Statement)yyVals[-1+yyTop])); }
  break;
case 118:
					// line 386 "src/anubis/parser/anubis.jay"
  { yyVal = new NewFunctionExpression(((List<String>)yyVals[-3+yyTop]), new ReturnStatement(((Expression)yyVals[-1+yyTop]))); }
  break;
case 127:
					// line 413 "src/anubis/parser/anubis.jay"
  { yyVal = new BlockExpression(EmptyStatement.INSTANCE); }
  break;
case 128:
					// line 415 "src/anubis/parser/anubis.jay"
  { yyVal = new BlockExpression(((Statement)yyVals[-1+yyTop])); }
  break;
case 129:
					// line 421 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 130:
					// line 423 "src/anubis/parser/anubis.jay"
  { yyVal = AObjects.getNull(); }
  break;
case 131:
					// line 425 "src/anubis/parser/anubis.jay"
  { yyVal = AObjects.getTrue(); }
  break;
case 132:
					// line 427 "src/anubis/parser/anubis.jay"
  { yyVal = AObjects.getFalse(); }
  break;
case 133:
					// line 429 "src/anubis/parser/anubis.jay"
  { yyVal = AObjects.getNumber(ParserHelper.parseNumber(((String)yyVals[0+yyTop]))); }
  break;
case 134:
					// line 431 "src/anubis/parser/anubis.jay"
  { yyVal = AObjects.getNumber(ParserHelper.parseNumber(((String)yyVals[0+yyTop]))); }
  break;
case 135:
					// line 433 "src/anubis/parser/anubis.jay"
  { yyVal = AObjects.getString(((String)yyVals[0+yyTop])); }
  break;
case 136:
					// line 435 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 137:
					// line 437 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 138:
					// line 442 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<String>(); }
  break;
case 139:
					// line 444 "src/anubis/parser/anubis.jay"
  { yyVal = ((List<String>)yyVals[0+yyTop]); }
  break;
case 140:
					// line 448 "src/anubis/parser/anubis.jay"
  { yyVal = new ArrayList<String>(Arrays.asList(((String)yyVals[0+yyTop]))); }
  break;
case 141:
					// line 450 "src/anubis/parser/anubis.jay"
  { yyVal = ((List<String>)yyVals[-2+yyTop]); ((List<String>)yyVals[-2+yyTop]).add(((String)yyVals[0+yyTop])); }
  break;
case 142:
					// line 453 "src/anubis/parser/anubis.jay"
  { yyVal = null; }
  break;
case 143:
					// line 455 "src/anubis/parser/anubis.jay"
  { yyVal = ((String)yyVals[0+yyTop]); }
  break;
case 144:
					// line 459 "src/anubis/parser/anubis.jay"
  { yyVal = ((String)yyVals[0+yyTop]); }
  break;
					// line 1966 "-"
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (yydebug != null) yydebug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (yydebug != null)
//t               yydebug.lex(yyState, yyToken,yyName(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (yydebug != null) yydebug.accept(yyVal);
            return yyVal;
          }
          continue yyLoop;
        }
        if ((yyN = yyGindex[yyM]) != 0 && (yyN += yyState) >= 0
            && yyN < yyTable.length && yyCheck[yyN] == yyState)
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (yydebug != null) yydebug.shift(yyStates[yyTop], yyState);
        continue yyLoop;
      }
    }
  }

					// line 462 "src/anubis/parser/anubis.jay"

      	private static CallExpression newCall(Expression expr, String name, Expression... args) {
		return newCall(expr, name, new CallArgument(null, args));
	}
	private static CallExpression newCall(Expression expr, String name, CallArgument args) {
		return new CallExpression(expr, name, args);
	}
	
	private static CallExpression newNewSlotCall(LeftValue lv, Expression right, boolean readonly) {
		if (lv instanceof SetSlotLeftValue) {
			SetSlotLeftValue left = (SetSlotLeftValue) lv;
			Expression slotName = new PrimitiveExpression(AObjects.getString(left.getName()));
			if (readonly) {
				return newCall(left.getExpr(), "newSlot", slotName, right, new PrimitiveExpression(AObjects.getTrue()));
			}
			else {
				return newCall(left.getExpr(), "newSlot", slotName, right);
			}
		}
		else if (lv instanceof SetSpecialLeftValue) {
			SetSpecialLeftValue left = (SetSpecialLeftValue) lv;
			switch (left.getName()) {
				case SUPER: {
					return newCall(left.getExpr(), "setSuper", right);
				}
				case OUTER: {
					return newCall(left.getExpr(), "setOuter", right);
				}
			}
		}
		else if (lv instanceof SetIndexLeftValue) {
			SetIndexLeftValue left = (SetIndexLeftValue) lv;
			return newCall(left.getExpr(), "set", left.getIndex(), right);
		}
		throw new BugIsHereException();
	}
	
	private static CallExpression newAssignCall(LeftValue lv, String op, Expression right) {
		Expression opname = null;
		if (op != null) {
			opname = new PrimitiveExpression(AObjects.getString(op));
		}
		
		if (lv instanceof SetSlotLeftValue) {
			SetSlotLeftValue left = (SetSlotLeftValue) lv;
			Expression slotName = new PrimitiveExpression(AObjects.getString(left.getName()));
			if (op != null)
				return newCall(left.getExpr(), "setSlot", slotName, right, opname);
			else
				return newCall(left.getExpr(), "setSlot", slotName, right);
		}
		else if (lv instanceof SetSpecialLeftValue) {
			SetSpecialLeftValue left = (SetSpecialLeftValue) lv;
			switch (left.getName()) {
				case SUPER: {
					if (op != null)
						return newCall(left.getExpr(), "setSuper", right, opname);
					else
						return newCall(left.getExpr(), "setSuper", right);
				}
				case OUTER: {
					if (op != null)
						return newCall(left.getExpr(), "setOuter", right, opname);
					else
						return newCall(left.getExpr(), "setOuter", right);
				}
			}
		}
		else if (lv instanceof SetIndexLeftValue) {
			SetIndexLeftValue left = (SetIndexLeftValue) lv;
			if (op != null)
				return newCall(left.getExpr(), "set", left.getIndex(), right, opname);
			else
				return newCall(left.getExpr(), "set", left.getIndex(), right);
		}
		throw new BugIsHereException();
	}
	
	public CompilationUnit parse(Reader source) {
		Parser yyparser = new Parser();
		try {
			return (CompilationUnit) yyparser.yyparse(new Scanner(source));
		}
		catch (Parser.yyException ye) {
			throw ExceptionProvider.newParseException(ye);
		}
		catch (IOException ie) {
			throw ExceptionProvider.newParseException(ie);
		}
	}
	public static void main(final String[] args) {
	    ObjectFactory oldFactory = AObjects.setCurrent(new StandardObjectFactory());
	    try {
			new Parser().parse(new FileReader(args[0]));
	    }
	    catch(IOException ex) {
			throw new RuntimeException(ex);
		}
		finally {
	    	AObjects.setCurrent(oldFactory);
	    }
	}
}
					// line 2100 "-"
